<?xml version="1.0" encoding="UTF-8"?>
<wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <wsp:All wsp:Usage="Required">
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:JSONSchema>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[{
  "definitions": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/root.json",
  "type": "object",
  "title": "The Root Schema",
  "required": [
    "I_ANI",
    "I_BLART",
    "I_COBRANZA",
    "I_CODAUTORIZA",
    "I_CTAC",
    "I_CTL_FACT",
    "I_OPBEL",
    "I_PLATAFORMA",
    "I_RUT",
    "I_STAKZ",
    "I_TIPO",
    "I_XBLNR"
  ],
  "properties": {
    "I_ANI": {
      "$id": "#/properties/I_ANI",
      "type": "string",
      "title": "The I_ani Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_BLART": {
      "$id": "#/properties/I_BLART",
      "type": "string",
      "title": "The I_blart Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_COBRANZA": {
      "$id": "#/properties/I_COBRANZA",
      "type": "string",
      "title": "The I_cobranza Schema",
      "default": "",
      "examples": [
        "0"
      ],
      "pattern": "^(.*)$"
    },
    "I_CODAUTORIZA": {
      "$id": "#/properties/I_CODAUTORIZA",
      "type": "string",
      "title": "The I_codautoriza Schema",
      "default": "",
      "examples": [
        "OWF"
      ],
      "pattern": "^(.*)$"
    },
    "I_CPUDT": {
      "$id": "#/properties/I_CPUDT",
      "type": "string",
      "title": "The I_cpudt Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_CSEP": {
      "$id": "#/properties/I_CSEP",
      "type": "string",
      "title": "The I_csep Schema",
      "default": "",
      "examples": [
        "|"
      ],
      "pattern": "^(.*)$"
    },
    "I_CTAC": {
      "$id": "#/properties/I_CTAC",
      "type": "string",
      "title": "The I_ctac Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_CTL_FACT": {
      "$id": "#/properties/I_CTL_FACT",
      "type": "string",
      "title": "The I_ctl_fact Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_ESTRUCTURA": {
      "$id": "#/properties/I_ESTRUCTURA",
      "type": "string",
      "title": "The I_estructura Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_FECHA_H": {
      "$id": "#/properties/I_FECHA_H",
      "type": "string",
      "title": "The I_fecha_h Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_GRP": {
      "$id": "#/properties/I_GRP",
      "type": "string",
      "title": "The I_grp Schema",
      "default": "",
      "examples": [
        "0"
      ],
      "pattern": "^(.*)$"
    },
    "I_OPBEL": {
      "$id": "#/properties/I_OPBEL",
      "type": "string",
      "title": "The I_opbel Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_OPTION_OPBEL": {
      "$id": "#/properties/I_OPTION_OPBEL",
      "type": "string",
      "title": "The I_option_opbel Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_PAIS": {
      "$id": "#/properties/I_PAIS",
      "type": "string",
      "title": "The I_pais Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_PLATAFORMA": {
      "$id": "#/properties/I_PLATAFORMA",
      "type": "string",
      "title": "The I_plataforma Schema",
      "default": "",
      "examples": [
        "ORACLE_WORKFLOW"
      ],
      "pattern": "^(.*)$"
    },
    "I_RUT": {
      "$id": "#/properties/I_RUT",
      "type": "string",
      "title": "The I_rut Schema",
      "default": "",
      "examples": [
        "15709282-0"
      ],
      "pattern": "^(.*)$"
    },
    "I_SIGN_OPBEL": {
      "$id": "#/properties/I_SIGN_OPBEL",
      "type": "string",
      "title": "The I_sign_opbel Schema",
      "default": "",
      "examples": [
        ""
      ],
      "pattern": "^(.*)$"
    },
    "I_STAKZ": {
      "$id": "#/properties/I_STAKZ",
      "type": "string",
      "title": "The I_stakz Schema",
      "default": "",
      "examples": [
        "0"
      ],
      "pattern": "^(.*)$"
    },
    "I_TIPO": {
      "$id": "#/properties/I_TIPO",
      "type": "string",
      "title": "The I_tipo Schema",
      "default": "",
      "examples": [
        "DETA_01_N"
      ],
      "pattern": "^(.*)$"
    },
    "I_XBLNR": {
      "$id": "#/properties/I_XBLNR",
      "type": "string",
      "title": "The I_xblnr Schema",
      "default": "",
      "examples": [
        "1183949"
      ],
      "pattern": "^(.*)$"
    },
    "I_XPA": {
      "$id": "#/properties/I_XPA",
      "type": "string",
      "title": "The I_xpa Schema",
      "default": "",
      "examples": [
        "1"
      ],
      "pattern": "^(.*)$"
    },
    "I_XREP": {
      "$id": "#/properties/I_XREP",
      "type": "string",
      "title": "The I_xrep Schema",
      "default": "",
      "examples": [
        "0"
      ],
      "pattern": "^(.*)$"
    },
    "T_CAMPOS": {
      "$id": "#/properties/T_CAMPOS",
      "type": "array",
      "title": "The T_campos Schema",
      "items": {
        "$id": "#/properties/T_CAMPOS/items",
        "type": "object",
        "title": "The Items Schema",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "$id": "#/properties/T_CAMPOS/items/properties/item",
            "type": "object",
            "title": "The Item Schema",
            "required": [
              "CAMPO",
              "DESCRIP"
            ],
            "properties": {
              "CAMPO": {
                "$id": "#/properties/T_CAMPOS/items/properties/item/properties/CAMPO",
                "type": "string",
                "title": "The Campo Schema",
                "default": "",
                "examples": [
                  "?"
                ],
                "pattern": "^(.*)$"
              },
              "DESCRIP": {
                "$id": "#/properties/T_CAMPOS/items/properties/item/properties/DESCRIP",
                "type": "string",
                "title": "The Descrip Schema",
                "default": "",
                "examples": [
                  "?"
                ],
                "pattern": "^(.*)$"
              }
            }
          }
        }
      }
    },
    "T_MENSAJE": {
      "$id": "#/properties/T_MENSAJE",
      "type": "object",
      "title": "The T_mensaje Schema",
      "required": [
        "item"
      ],
      "properties": {
        "item": {
          "$id": "#/properties/T_MENSAJE/properties/item",
          "type": "object",
          "title": "The Item Schema",
          "required": [
            "LARGO",
            "CREG"
          ],
          "properties": {
            "LARGO": {
              "$id": "#/properties/T_MENSAJE/properties/item/properties/LARGO",
              "type": "string",
              "title": "The Largo Schema",
              "default": "",
              "examples": [
                "?"
              ],
              "pattern": "^(.*)$"
            },
            "CREG": {
              "$id": "#/properties/T_MENSAJE/properties/item/properties/CREG",
              "type": "string",
              "title": "The Creg Schema",
              "default": "",
              "examples": [
                "?"
              ],
              "pattern": "^(.*)$"
            }
          }
        }
      }
    }
  }
}]]></L7p:Document>
                    </L7p:ResourceInfo>
                </L7p:JSONSchema>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="NDAw"/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBpbmNvcnJlY3RhLg=="/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBKU09OIG5vIGVzIHbDoWxpZGEu"/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:AuditDetailAssertion>
                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                    <L7p:LoggingOnly booleanValue="true"/>
                </L7p:AuditDetailAssertion>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                    <L7p:HttpStatus stringValue="400"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="// Validar entrada"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_ANI"/>
                    <L7p:VariablePrefix stringValue="I_ANI"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_BLART"/>
                    <L7p:VariablePrefix stringValue="I_BLART"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_COBRANZA"/>
                    <L7p:VariablePrefix stringValue="I_COBRANZA"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_CODAUTORIZA"/>
                    <L7p:VariablePrefix stringValue="I_CODAUTORIZA"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_CPUDT"/>
                    <L7p:VariablePrefix stringValue="I_CPUDT"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_CSEP"/>
                    <L7p:VariablePrefix stringValue="I_CSEP"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_CTAC"/>
                    <L7p:VariablePrefix stringValue="I_CTAC"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_CTL_FACT"/>
                    <L7p:VariablePrefix stringValue="I_CTL_FACT"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_ESTRUCTURA"/>
                    <L7p:VariablePrefix stringValue="I_ESTRUCTURA"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_FECHA_H"/>
                    <L7p:VariablePrefix stringValue="I_FECHA_H"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_GRP"/>
                    <L7p:VariablePrefix stringValue="I_GRP"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_OPBEL"/>
                    <L7p:VariablePrefix stringValue="I_OPBEL"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_OPTION_OPBEL"/>
                    <L7p:VariablePrefix stringValue="I_OPTION_OPBEL"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_PAIS"/>
                    <L7p:VariablePrefix stringValue="I_PAIS"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_PLATAFORMA"/>
                    <L7p:VariablePrefix stringValue="I_PLATAFORMA"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_RUT"/>
                    <L7p:VariablePrefix stringValue="I_RUT"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_SIGN_OPBEL"/>
                    <L7p:VariablePrefix stringValue="I_SIGN_OPBEL"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_STAKZ"/>
                    <L7p:VariablePrefix stringValue="I_STAKZ"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_TIPO"/>
                    <L7p:VariablePrefix stringValue="I_TIPO"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_XBLNR"/>
                    <L7p:VariablePrefix stringValue="I_XBLNR"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_XPA"/>
                    <L7p:VariablePrefix stringValue="I_XPA"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".I_XREP"/>
                    <L7p:VariablePrefix stringValue="I_XREP"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".T_CAMPOS.item"/>
                    <L7p:VariablePrefix stringValue="t_campos"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".T_MENSAJE.item"/>
                    <L7p:VariablePrefix stringValue="t_mensaje"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue=""/>
                    <L7p:VariableToSet stringValue="listT_CAMPOS"/>
                </L7p:SetVariable>
                <L7p:ForEachLoop L7p:Usage="Required"
                    loopVariable="t_campos.results" variablePrefix="aux">
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHthdXguY3VycmVudH0="/>
                        <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="messageInJson"/>
                    </L7p:SetVariable>
                    <L7p:EvaluateJsonPathExpression>
                        <L7p:Expression stringValue=".CAMPOS"/>
                        <L7p:OtherTargetMessageVariable stringValue="messageInJson"/>
                        <L7p:Target target="OTHER"/>
                        <L7p:VariablePrefix stringValue="campo"/>
                    </L7p:EvaluateJsonPathExpression>
                    <L7p:EvaluateJsonPathExpression>
                        <L7p:Expression stringValue=".DESCRIP"/>
                        <L7p:OtherTargetMessageVariable stringValue="messageInJson"/>
                        <L7p:Target target="OTHER"/>
                        <L7p:VariablePrefix stringValue="descrip"/>
                    </L7p:EvaluateJsonPathExpression>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtsaXN0VF9DQU1QT1N9DQo8aXRlbT48Q0FNUE8+JHtjYW1wby5yZXN1bHR9PC9DQU1QTz4NCgk8REVTQ1JJUD4ke2Rlc2NyaXAucmVzdWx0fTwvREVTQ1JJUD4NCjwvaXRlbT4="/>
                        <L7p:VariableToSet stringValue="listT_CAMPOS"/>
                    </L7p:SetVariable>
                </L7p:ForEachLoop>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue=""/>
                    <L7p:VariableToSet stringValue="listT_MENSAJE"/>
                </L7p:SetVariable>
                <L7p:ForEachLoop L7p:Usage="Required"
                    loopVariable="t_mensaje.results" variablePrefix="aux">
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHthdXguY3VycmVudH0="/>
                        <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="messageInJson"/>
                    </L7p:SetVariable>
                    <L7p:EvaluateJsonPathExpression>
                        <L7p:Expression stringValue=".LARGO"/>
                        <L7p:OtherTargetMessageVariable stringValue="messageInJson"/>
                        <L7p:Target target="OTHER"/>
                        <L7p:VariablePrefix stringValue="largo"/>
                    </L7p:EvaluateJsonPathExpression>
                    <L7p:EvaluateJsonPathExpression>
                        <L7p:Expression stringValue=".CREG"/>
                        <L7p:OtherTargetMessageVariable stringValue="messageInJson"/>
                        <L7p:Target target="OTHER"/>
                        <L7p:VariablePrefix stringValue="creg"/>
                    </L7p:EvaluateJsonPathExpression>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtsaXN0VF9NRU5TQUpFfQ0KPGl0ZW0+PExBUkdPPiR7bGFyZ28ucmVzdWx0fTwvTEFSR08+DQoJPENSRUc+JHtjcmVnLnJlc3VsdH08L0NSRUc+DQo8L2l0ZW0+"/>
                        <L7p:VariableToSet stringValue="listT_MENSAJE"/>
                    </L7p:SetVariable>
                </L7p:ForEachLoop>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnVybj0idXJuOnNhcC1jb206ZG9jdW1lbnQ6c2FwOnJmYzpmdW5jdGlvbnMiPg0KICAgPHNvYXBlbnY6SGVhZGVyLz4NCiAgIDxzb2FwZW52OkJvZHk+DQogICAgICA8dXJuOlpXU0ZfQ09OU1VMVEFfUEFSX0VOVEVMPg0KICAgICAgICAgPElfQU5JPiR7SV9BTkkucmVzdWx0fTwvSV9BTkk+DQogICAgICAgICA8SV9CTEFSVD4ke0lfQkxBUlQucmVzdWx0fTwvSV9CTEFSVD4NCiAgICAgICAgIDxJX0NPQlJBTlpBPiR7SV9DT0JSQU5aQS5yZXN1bHR9PC9JX0NPQlJBTlpBPg0KICAgICAgICAgPElfQ09EQVVUT1JJWkE+JHtJX0NPREFVVE9SSVpBLnJlc3VsdH08L0lfQ09EQVVUT1JJWkE+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8SV9DUFVEVD4ke0lfQ1BVRFQucmVzdWx0fTwvSV9DUFVEVD4NCiAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgIDxJX0NTRVA+JHtJX0NTRVAucmVzdWx0fTwvSV9DU0VQPg0KICAgICAgICAgPElfQ1RBQz4ke0lfQ1RBQy5yZXN1bHR9PC9JX0NUQUM+DQogICAgICAgICA8SV9DVExfRkFDVD4ke0lfQ1RMX0ZBQ1QucmVzdWx0fTwvSV9DVExfRkFDVD4NCiAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgIDxJX0VTVFJVQ1RVUkE+JHtJX0VTVFJVQ1RVUkEucmVzdWx0fTwvSV9FU1RSVUNUVVJBPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPElfRkVDSEFfSD4ke0lfRkVDSEFfSC5yZXN1bHR9PC9JX0ZFQ0hBX0g+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8SV9HUlA+JHtJX0dSUC5yZXN1bHR9PC9JX0dSUD4NCiAgICAgICAgIDxJX09QQkVMPiR7SV9PUEJFTC5yZXN1bHR9PC9JX09QQkVMPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPElfT1BUSU9OX09QQkVMPiR7SV9PUFRJT05fT1BCRUwucmVzdWx0fTwvSV9PUFRJT05fT1BCRUw+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8SV9QQUlTPiR7SV9QQUlTLnJlc3VsdH08L0lfUEFJUz4NCiAgICAgICAgIDxJX1BMQVRBRk9STUE+JHtJX1BMQVRBRk9STUEucmVzdWx0fTwvSV9QTEFUQUZPUk1BPg0KICAgICAgICAgPElfUlVUPiR7SV9SVVQucmVzdWx0fTwvSV9SVVQ+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8SV9TSUdOX09QQkVMPiR7SV9TSUdOX09QQkVMLnJlc3VsdH08L0lfU0lHTl9PUEJFTD4NCiAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgIDxJX1NUQUtaPiR7SV9TVEFLWi5yZXN1bHR9PC9JX1NUQUtaPg0KICAgICAgICAgPElfVElQTz4ke0lfVElQTy5yZXN1bHR9PC9JX1RJUE8+DQogICAgICAgICA8SV9YQkxOUj4ke0lfWEJMTlIucmVzdWx0fTwvSV9YQkxOUj4NCiAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgIDxJX1hQQT4ke0lfWFBBLnJlc3VsdH08L0lfWFBBPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPElfWFJFUD4ke0lfWFJFUC5yZXN1bHR9PC9JX1hSRVA+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8VF9DQU1QT1M+DQogICAgICAgICAJCSR7bGlzdFRfQ0FNUE9TfQ0KICAgICAgICAgICAgPCEtLVplcm8gb3IgbW9yZSByZXBldGl0aW9uczotLT4NCiAgICAgICAgIDwvVF9DQU1QT1M+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8VF9NRU5TQUpFPg0KICAgICAgICAgCQkke2xpc3RUX01FTlNBSkV9DQogICAgICAgICAgICA8IS0tWmVybyBvciBtb3JlIHJlcGV0aXRpb25zOi0tPg0KICAgICAgICAgPC9UX01FTlNBSkU+DQogICAgICA8L3VybjpaV1NGX0NPTlNVTFRBX1BBUl9FTlRFTD4NCiAgIDwvc29hcGVudjpCb2R5Pg0KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="request"/>
                </L7p:SetVariable>
                <L7p:HttpRoutingAssertion>
                    <L7p:ConnectionTimeout stringValue="5000"/>
                    <L7p:FailOnErrorStatus booleanValue="false"/>
                    <L7p:HttpMethod httpMethod="POST"/>
                    <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/enterprise/enterprise/gestionservadministrativos/ent_t_px_consultardocumentositemsfacturadosps"/>
                    <L7p:ProxyPassword stringValueNull="null"/>
                    <L7p:ProxyUsername stringValueNull="null"/>
                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Cookie"/>
                            </L7p:item>
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="SOAPAction"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:RequestHeaderRules>
                    <L7p:RequestMsgSrc stringValue="request"/>
                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included"/>
                    </L7p:RequestParamRules>
                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Set-Cookie"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:ResponseHeaderRules>
                    <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                    <L7p:Timeout stringValue="6900"/>
                </L7p:HttpRoutingAssertion>
                <L7p:AuditDetailAssertion>
                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} BACKEND: ${httpRouting.url} LATENCY: ${httpRouting.latency} ms REASONCODE: ${httpRouting.reasonCode} RESPONSEBACKEND: ${serviceResponse.mainpart} "/>
                    <L7p:LoggingOnly booleanValue="true"/>
                </L7p:AuditDetailAssertion>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iPg0KICAgPFM6Qm9keSB4bWxuczpTPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VudmVsb3BlLyI+DQogICAgICA8cmVzOmNvbnN1bHRhVHJhZmljb1ZvelJlZEZpamFSZXNwb25zZSB4bWxuczpyZXM9Imh0dHA6Ly93d3cuZXNhLmNvbS9NRUQvRS9jb25zdWx0YVRyYWZpY29Wb3pSZWRGaWphL1Jlc3BvbnNlIj4NCiAgICAgICAgIDxyZXM6cmVzcHVlc3RhPg0KICAgICAgICAgICAgPHJlczpjb2RpZ28+MDAwMDwvcmVzOmNvZGlnbz4NCiAgICAgICAgICAgIDxyZXM6ZGVzY3JpcGNpb24+U3VjY2VzczwvcmVzOmRlc2NyaXBjaW9uPg0KICAgICAgICAgPC9yZXM6cmVzcHVlc3RhPg0KICAgICAgICAgPHJlczptaW5Ub3RhbFNMTT4xMDc8L3JlczptaW5Ub3RhbFNMTT4NCiAgICAgICAgIDxyZXM6bWluVG90YWxNb3ZpbD4wPC9yZXM6bWluVG90YWxNb3ZpbD4NCiAgICAgICAgIDxyZXM6bWluVG90YWxSdXJhbD4wPC9yZXM6bWluVG90YWxSdXJhbD4NCiAgICAgICAgIDxyZXM6bWluVG90YWxPdHJvcz4xODwvcmVzOm1pblRvdGFsT3Ryb3M+DQogICAgICAgICA8cmVzOmRldE51bWVyYWNpb24+DQogICAgICAgICAgICA8cmVzOm5yb1RlbGVmb25vPjIyNDgxNTMwNDwvcmVzOm5yb1RlbGVmb25vPg0KICAgICAgICAgICAgPHJlczptaW5TTE0+MjM8L3JlczptaW5TTE0+DQogICAgICAgICAgICA8cmVzOm1pbk1vdmlsPjA8L3JlczptaW5Nb3ZpbD4NCiAgICAgICAgICAgIDxyZXM6bWluTERJPjA8L3JlczptaW5MREk+DQogICAgICAgICAgICA8cmVzOm1pblJ1cmFsPjA8L3JlczptaW5SdXJhbD4NCiAgICAgICAgICAgIDxyZXM6bWluT3Ryb3M+MTI8L3JlczptaW5PdHJvcz4NCiAgICAgICAgIDwvcmVzOmRldE51bWVyYWNpb24+DQogICAgICAgICA8cmVzOmRldE51bWVyYWNpb24+DQogICAgICAgICAgICA8cmVzOm5yb1RlbGVmb25vPjIyNDgxNTMwNjwvcmVzOm5yb1RlbGVmb25vPg0KICAgICAgICAgICAgPHJlczptaW5TTE0+ODQ8L3JlczptaW5TTE0+DQogICAgICAgICAgICA8cmVzOm1pbk1vdmlsPjA8L3JlczptaW5Nb3ZpbD4NCiAgICAgICAgICAgIDxyZXM6bWluTERJPjA8L3JlczptaW5MREk+DQogICAgICAgICAgICA8cmVzOm1pblJ1cmFsPjA8L3JlczptaW5SdXJhbD4NCiAgICAgICAgICAgIDxyZXM6bWluT3Ryb3M+NjwvcmVzOm1pbk90cm9zPg0KICAgICAgICAgPC9yZXM6ZGV0TnVtZXJhY2lvbj4NCiAgICAgIDwvcmVzOmNvbnN1bHRhVHJhZmljb1ZvelJlZEZpamFSZXNwb25zZT4NCiAgIDwvUzpCb2R5Pg0KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:Enabled booleanValue="false"/>
                    <L7p:VariableToSet stringValue="serviceResponse"/>
                </L7p:SetVariable>
                <L7p:ResponseXpathAssertion>
                    <L7p:VariablePrefix stringValue="codeResult"/>
                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                    <L7p:XpathExpression xpathExpressionValue="included">
                        <L7p:Expression stringValue="/soap-env:Envelope/soap-env:Body/n0:ZWSF_CONSULTA_PAR_ENTELResponse/E_CODOK"/>
                        <L7p:Namespaces mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="res"/>
                                <L7p:value stringValue="http://www.esa.com/MED/E/consultaTraficoVozRedFija/Response"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="n0"/>
                                <L7p:value stringValue="urn:sap-com:document:sap:rfc:functions"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="soap-env"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="S"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="soapenv"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                        </L7p:Namespaces>
                        <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                    </L7p:XpathExpression>
                </L7p:ResponseXpathAssertion>
                <L7p:ResponseXpathAssertion>
                    <L7p:VariablePrefix stringValue="descriptionResult"/>
                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                    <L7p:XpathExpression xpathExpressionValue="included">
                        <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/n0:ZWSF_CONSULTA_PAR_ENTELResponse/E_MESGE"/>
                        <L7p:Namespaces mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="res"/>
                                <L7p:value stringValue="http://www.esa.com/MED/E/consultaTraficoVozRedFija/Response"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="n0"/>
                                <L7p:value stringValue="urn:sap-com:document:sap:rfc:functions"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="soapenv"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="S"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                        </L7p:Namespaces>
                        <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                    </L7p:XpathExpression>
                </L7p:ResponseXpathAssertion>
                <L7p:ResponseXpathAssertion>
                    <L7p:VariablePrefix stringValue="deletePath"/>
                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                    <L7p:XpathExpression xpathExpressionValue="included">
                        <L7p:Expression stringValue="/soapenv:Envelope/soapenv:Body/n0:ZWSF_CONSULTA_PAR_ENTELResponse"/>
                        <L7p:Namespaces mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="res"/>
                                <L7p:value stringValue="http://www.esa.com/MED/E/consultaTraficoVozRedFija/Response"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="n0"/>
                                <L7p:value stringValue="urn:sap-com:document:sap:rfc:functions"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="soapenv"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="S"/>
                                <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                            </L7p:entry>
                        </L7p:Namespaces>
                        <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                    </L7p:XpathExpression>
                </L7p:ResponseXpathAssertion>
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                    <L7p:Operator operatorNull="null"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item dataType="included">
                            <L7p:Type variableDataType="int"/>
                        </L7p:item>
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="200"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${codeResult.result}"/>
                            <L7p:Expression2 stringValue="0000"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0000"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:RemoveElement>
                            <L7p:ElementFromVariable stringValue="codeResult.elements[0]"/>
                            <L7p:ElementToInsertVariable stringValue=""/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:RemoveElement>
                        <L7p:RemoveElement>
                            <L7p:ElementFromVariable stringValue="descriptionResult.elements[0]"/>
                            <L7p:ElementToInsertVariable stringValue=""/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:RemoveElement>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:MsgVarPrefix stringValue="xslt2"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'detNumeracion']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                            <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="responseJson"/>
                        </L7p:SetVariable>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".ZWSF_CONSULTA_PAR_ENTELResponse"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                            <L7p:Regex stringValue="^\{|^}"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZVJlc3VsdC5yZXN1bHR9IiwKCSJkZXNjcmlwdGlvbiI6IiR7aHR0cFJvdXRpbmcucmVhc29uQ29kZX0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjogIiR7ZGVzY3JpcHRpb25SZXN1bHQucmVzdWx0fSIsCgkicmVzcG9uc2VUaW1lc3RhbXAiOiIke3Jlc3BvbnNlVGltZXN0YW1wfSIKCX0sCiR7anNvblBhdGgucmVzdWx0fQo="/>
                            <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="// Éxito"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${codeResult.result}"/>
                            <L7p:Expression2 stringValue="0001"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0001"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:RemoveElement>
                            <L7p:ElementFromVariable stringValue="codeResult.elements[0]"/>
                            <L7p:ElementToInsertVariable stringValue=""/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:RemoveElement>
                        <L7p:RemoveElement>
                            <L7p:ElementFromVariable stringValue="descriptionResult.elements[0]"/>
                            <L7p:ElementToInsertVariable stringValue=""/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:RemoveElement>
                        <L7p:RemoveElement>
                            <L7p:ElementFromVariable stringValue="deletePath.elements[0]"/>
                            <L7p:ElementToInsertVariable stringValue=""/>
                            <L7p:Enabled booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:RemoveElement>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:MsgVarPrefix stringValue="xslt2"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'detNumeracion']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                            <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="responseJson"/>
                        </L7p:SetVariable>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".ZWSF_CONSULTA_PAR_ENTELResponse"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtodHRwUm91dGluZy5yZWFzb25Db2RlfQ=="/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvblJlc3VsdC5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                            <L7p:Regex stringValue="^\{|^}"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjogIiR7ZGVzY3JpcHRpb25EZXRhaWx9IiwKCSJyZXNwb25zZVRpbWVzdGFtcCI6IiR7cmVzcG9uc2VUaW1lc3RhbXB9IgoJfSwKJHtqc29uUGF0aC5yZXN1bHR9Cg=="/>
                            <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="// Error de Negocio"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGE="/>
                            <L7p:LineBreak lineBreak="LF"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvblJlc3VsdC5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                            <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.mainpart}"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:RaiseError/>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="// Otro error"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="14295f18-da19-4f0e-9643-a8c30b3544dc"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="CodeStatus"/>
                </L7p:Encapsulated>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                    <L7p:VariableToSet stringValue="codeSource"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:AuditDetailAssertion>
                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                    <L7p:LoggingOnly booleanValue="true"/>
                </L7p:AuditDetailAssertion>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${codeSource}",
	"description":"${codeDescription}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                    <L7p:HttpStatus stringValue="${httpRouting.reasonCode}"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Include>
                    <L7p:PolicyGuid stringValue="1b3f18a3-5e88-4cae-9fae-44b459727ac1"/>
                </L7p:Include>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="// Lógica"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
    </wsp:All>
</wsp:Policy>