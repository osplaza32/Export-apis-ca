<?xml version="1.0" encoding="UTF-8"?>
<wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <wsp:All wsp:Usage="Required">
        <wsp:OneOrMore L7p:Enabled="false" wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${request.http.parameter.format}"/>
                    <L7p:Expression2 stringValue="EXCEL"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="EXCEL"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${request.http.parameter.email}"/>
                            <L7p:Expression2 stringValue="1"/>
                            <L7p:Negate booleanValue="true"/>
                            <L7p:Operator operator="EMPTY"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue="1"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:HtmlFormDataAssertion>
                                    <L7p:AllowGet booleanValue="true"/>
                                    <L7p:DisallowOtherFields booleanValue="true"/>
                                    <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="documentoGUID"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="email"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="format"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="origen"/>
                                    </L7p:item>
                                    </L7p:FieldSpecs>
                                </L7p:HtmlFormDataAssertion>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDAw"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="UGFyw6FtZXRyb3MgaW5jb3JyZWN0b3Mu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBsYSBVUkkgaW52w6FsaWRhLg=="/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="400"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="HTML Form - Validar ParÃ¡metros"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyIC8+DQogICA8c29hcGVudjpCb2R5Pg0KICAgICAgPHBjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgICAgICAgPGRvY3VtZW50b0dVSUQ+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmRvY3VtZW50b308L2RvY3VtZW50b0dVSUQ+DQogICAgICAgICA8ZW1haWw+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmVtYWlsfTwvZW1haWw+DQogICAgICAgICA8b3JpZ2VuPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5vcmlnZW59PC9vcmlnZW4+DQogICAgICA8L3BjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                            <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="xmlMessage"/>
                        </L7p:SetVariable>
                        <L7p:HttpRoutingAssertion>
                            <L7p:FailOnErrorStatus booleanValue="false"/>
                            <L7p:HttpMethod httpMethod="POST"/>
                            <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/Billing/BillingCons/ConsultaFacturas/bil_t_obtenerfacturapcsfijaexcelps"/>
                            <L7p:ProxyPassword stringValueNull="null"/>
                            <L7p:ProxyUsername stringValueNull="null"/>
                            <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:RequestHeaderRules>
                            <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                            <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included"/>
                            </L7p:RequestParamRules>
                            <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:ResponseHeaderRules>
                            <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                            <L7p:SamlAssertionVersion intValue="2"/>
                        </L7p:HttpRoutingAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="codeResult"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/codRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/desRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="int"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:MsgVarPrefix stringValue="xslt2"/>

                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                    </L7p:SetVariable>
                                    <L7p:EvaluateJsonPathExpression>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression stringValue=".return"/>

                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:EvaluateJsonPathExpression>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Encapsulated>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZVJlc3VsdC5yZXN1bHR9IiwKCSJkZXNjcmlwdGlvbiI6IiR7ZGVzY3JpcHRpb259IiwKCSJkZXNjcmlwdGlvbkRldGFpbCI6IiR7ZGVzY3JpcHRpb25EZXRhaWwucmVzdWx0fSIsCgkicmVzcG9uc2VUaW1lc3RhbXAiOiIke3Jlc3BvbnNlVGltZXN0YW1wfSIKCX0KfQ=="/>
                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                    </L7p:HardcodedResponse>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="int"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${codeResult.result}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail.result}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                    </L7p:CustomizeErrorResponse>
                                    <L7p:RaiseError/>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                </wsp:OneOrMore>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/S:Body/S:Fault/detail/ns2:exception/message"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns20"/>
                                    <L7p:value stringValue="http://ws.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://jax-ws.dev.java.net/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns3"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> Error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="//Con e-Mail"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Enabled booleanValue="false"/>
                            <L7p:Expression1 stringValue="${request.http.parameter.email}"/>
                            <L7p:Expression2 stringValue="1"/>
                            <L7p:Operator operator="EMPTY"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue="1"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:HtmlFormDataAssertion>
                                    <L7p:AllowGet booleanValue="true"/>
                                    <L7p:DisallowOtherFields booleanValue="true"/>
                                    <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="documentoGUID"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="true"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:Name stringValue="email"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="format"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="origen"/>
                                    </L7p:item>
                                    </L7p:FieldSpecs>
                                </L7p:HtmlFormDataAssertion>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDAw"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="UGFyw6FtZXRyb3MgaW5jb3JyZWN0b3Mu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBsYSBVUkkgaW52w6FsaWRhLg=="/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="400"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="HTML Form - Validar ParÃ¡metros"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyIC8+DQogICA8c29hcGVudjpCb2R5Pg0KICAgICAgPHBjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgICAgICAgPGRvY3VtZW50b0dVSUQ+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmRvY3VtZW50b308L2RvY3VtZW50b0dVSUQ+DQogICAgICAgICA8ZW1haWw+PC9lbWFpbD4NCiAgICAgICAgIDxvcmlnZW4+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLm9yaWdlbn08L29yaWdlbj4NCiAgICAgIDwvcGNzOmdldERvY3VtZW50b0FzRXhjZWw+DQogICA8L3NvYXBlbnY6Qm9keT4NCjwvc29hcGVudjpFbnZlbG9wZT4="/>
                            <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="xmlMessage"/>
                        </L7p:SetVariable>
                        <L7p:HttpRoutingAssertion>
                            <L7p:FailOnErrorStatus booleanValue="false"/>
                            <L7p:HttpMethod httpMethod="POST"/>
                            <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/Billing/BillingCons/ConsultaFacturas/bil_t_obtenerfacturapcsfijaexcelps"/>
                            <L7p:ProxyPassword stringValueNull="null"/>
                            <L7p:ProxyUsername stringValueNull="null"/>
                            <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:RequestHeaderRules>
                            <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                            <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included"/>
                            </L7p:RequestParamRules>
                            <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:ResponseHeaderRules>
                            <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                            <L7p:SamlAssertionVersion intValue="2"/>
                        </L7p:HttpRoutingAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="codeResult"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/codRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/desRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                </L7p:SetVariable>
                                <L7p:EvaluateJsonPathExpression>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression stringValue=".return"/>
                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:EvaluateJsonPathExpression>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Encapsulated>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                </L7p:Encapsulated>
                                <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZVJlc3VsdC5yZXN1bHR9IiwKCSJkZXNjcmlwdGlvbiI6IiR7ZGVzY3JpcHRpb259IiwKCSJkZXNjcmlwdGlvbkRldGFpbCI6IiR7ZGVzY3JpcHRpb25EZXRhaWwucmVzdWx0fSIsCgkicmVzcG9uc2VUaW1lc3RhbXAiOiIke3Jlc3BvbnNlVGltZXN0YW1wfSIKCX0KfQ=="/>
                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                </L7p:HardcodedResponse>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/S:Body/S:Fault/detail/ns2:exception/message"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns20"/>
                                    <L7p:value stringValue="http://ws.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://jax-ws.dev.java.net/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns3"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> Error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="//Sin e-Mail"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="//LÃ³gica de documentsCustomerBills(EXCEL)"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:HtmlFormDataAssertion>
                            <L7p:AllowGet booleanValue="true"/>
                            <L7p:DisallowOtherFields booleanValue="true"/>
                            <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                                <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="cuenta"/>
                                </L7p:item>
                                <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="origen"/>
                                </L7p:item>
                            </L7p:FieldSpecs>
                        </L7p:HtmlFormDataAssertion>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="NDAw"/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="UGFyw6FtZXRyb3MgaW5jb3JyZWN0b3Mu"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBsYSBVUkkgaW52w6FsaWRhLg=="/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                            <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="400"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:RaiseError/>
                    </wsp:All>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="HTML Form - Validar ParÃ¡metros"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:OneOrMore>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyLz4NCiAgIDxzb2FwZW52OkJvZHk+DQogICAgICA8cGNzOmdldERvY3VtZW50b3M+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8Y3VlbnRhPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5jdWVudGF9PC9jdWVudGE+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8b3JpZ2VuPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5vcmlnZW59PC9vcmlnZW4+DQogICAgICA8L3BjczpnZXREb2N1bWVudG9zPg0KICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="xmlMessage"/>
                </L7p:SetVariable>
                <L7p:HttpRoutingAssertion>
                    <L7p:FailOnErrorStatus booleanValue="false"/>
                    <L7p:HttpMethod httpMethod="POST"/>
                    <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/Billing/BillingCons/ConsultaFacturas/bil_t_obtenerfacturapcsfijaps"/>
                    <L7p:ProxyPassword stringValueNull="null"/>
                    <L7p:ProxyUsername stringValueNull="null"/>
                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Cookie"/>
                            </L7p:item>
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="SOAPAction"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:RequestHeaderRules>
                    <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included"/>
                    </L7p:RequestParamRules>
                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Set-Cookie"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:ResponseHeaderRules>
                    <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                    <L7p:SamlAssertionVersion intValue="2"/>
                </L7p:HttpRoutingAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                            <L7p:Expression2 stringValue="200"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="codeResult"/>
                            <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentosResponse/return/codRes"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="descriptionDetail"/>
                            <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentosResponse/return/desRes"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Expression2 stringValue="0"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                </L7p:SetVariable>
                                <L7p:EvaluateJsonPathExpression>
                                    <L7p:Expression stringValue=".return"/>
                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:EvaluateJsonPathExpression>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Encapsulated>
                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                </L7p:Encapsulated>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="int"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${codeResult.result}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail.result}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9Cn0="/>
                            <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All L7p:Enabled="false" wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                            <L7p:Expression2 stringValue="200"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:MsgVarPrefix stringValue="xslt2"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                            <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="responseJson"/>
                        </L7p:SetVariable>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".return"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                            <L7p:Regex stringValue="^(.)|}$"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoke2pzb25QYXRoLnJlc3VsdH0KfQ=="/>
                            <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                            <L7p:Expression2 stringValue="200"/>
                            <L7p:Operator operator="NE"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:RightValue stringValue="200"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="descriptionDetail"/>
                            <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/soapenv:Envelope/S:Body/S:Fault/detail/ns2:exception/message"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns20"/>
                                    <L7p:value stringValue="http://ws.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://jax-ws.dev.java.net/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns3"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="NDIy"/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                            <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="422"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:RaiseError/>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> Error de negocio"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="//LÃ³gica de documentsCustomerBills"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="14295f18-da19-4f0e-9643-a8c30b3544dc"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="CodeStatus"/>
                </L7p:Encapsulated>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtodHRwUm91dGluZy5yZWFzb25Db2RlfQ=="/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtjb2RlRGVzY3JpcHRpb259"/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".SourceError.description"/>
                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                    <L7p:Target target="OTHER"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtqc29uUGF0aC5yZXN1bHR9"/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
            </wsp:All>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="1b3f18a3-5e88-4cae-9fae-44b459727ac1"/>
            </L7p:Include>
        </wsp:OneOrMore>
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${request.http.parameter.format}"/>
                    <L7p:Expression2 stringValue="EXCEL"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="EXCEL"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Enabled booleanValue="false"/>
                            <L7p:Expression1 stringValue="${request.http.parameter.email}"/>
                            <L7p:Expression2 stringValue="1"/>
                            <L7p:Negate booleanValue="true"/>
                            <L7p:Operator operator="EMPTY"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue="1"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:HtmlFormDataAssertion>
                                    <L7p:AllowGet booleanValue="true"/>
                                    <L7p:DisallowOtherFields booleanValue="true"/>
                                    <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="documentoGUID"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:Name stringValue="email"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="format"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="origen"/>
                                    </L7p:item>
                                    </L7p:FieldSpecs>
                                </L7p:HtmlFormDataAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmVtYWlsfQ=="/>
                                    <L7p:VariableToSet stringValue="correo"/>
                                </L7p:SetVariable>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDAw"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="UGFyw6FtZXRyb3MgaW5jb3JyZWN0b3Mu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBsYSBVUkkgaW52w6FsaWRhLg=="/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="400"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="HTML Form - Validar ParÃ¡metros"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyIC8+DQogICA8c29hcGVudjpCb2R5Pg0KICAgICAgPHBjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgICAgICAgPGRvY3VtZW50b0dVSUQ+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmRvY3VtZW50b308L2RvY3VtZW50b0dVSUQ+DQogICAgICAgICA8ZW1haWw+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmVtYWlsfTwvZW1haWw+DQogICAgICAgICA8b3JpZ2VuPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5vcmlnZW59PC9vcmlnZW4+DQogICAgICA8L3BjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                            <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:Enabled booleanValue="false"/>
                            <L7p:VariableToSet stringValue="xmlMessage"/>
                        </L7p:SetVariable>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${correo}"/>
                                    <L7p:Expression2 stringValue=""/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue=""/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyIC8+DQogICA8c29hcGVudjpCb2R5Pg0KICAgICAgPHBjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgICAgICAgPGRvY3VtZW50b0dVSUQ+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmRvY3VtZW50b0dVSUR9PC9kb2N1bWVudG9HVUlEPg0KICAgICAgICAgPG9yaWdlbj4ke3JlcXVlc3QuaHR0cC5wYXJhbWV0ZXIub3JpZ2VufTwvb3JpZ2VuPg0KICAgICAgPC9wY3M6Z2V0RG9jdW1lbnRvQXNFeGNlbD4NCiAgIDwvc29hcGVudjpCb2R5Pg0KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="xmlMessage"/>
                                </L7p:SetVariable>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyIC8+DQogICA8c29hcGVudjpCb2R5Pg0KICAgICAgPHBjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgICAgICAgPGRvY3VtZW50b0dVSUQ+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmRvY3VtZW50b0dVSUR9PC9kb2N1bWVudG9HVUlEPg0KICAgICAgICAgPGVtYWlsPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5lbWFpbH08L2VtYWlsPg0KICAgICAgICAgPG9yaWdlbj4ke3JlcXVlc3QuaHR0cC5wYXJhbWV0ZXIub3JpZ2VufTwvb3JpZ2VuPg0KICAgICAgPC9wY3M6Z2V0RG9jdW1lbnRvQXNFeGNlbD4NCiAgIDwvc29hcGVudjpCb2R5Pg0KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="xmlMessage"/>
                                </L7p:SetVariable>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:HttpRoutingAssertion>
                            <L7p:FailOnErrorStatus booleanValue="false"/>
                            <L7p:HttpMethod httpMethod="POST"/>
                            <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/Billing/BillingCons/ConsultaFacturas/bil_t_obtenerfacturapcsfijaexcelps"/>
                            <L7p:ProxyPassword stringValueNull="null"/>
                            <L7p:ProxyUsername stringValueNull="null"/>
                            <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:RequestHeaderRules>
                            <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                            <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included"/>
                            </L7p:RequestParamRules>
                            <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:ResponseHeaderRules>
                            <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                            <L7p:SamlAssertionVersion intValue="2"/>
                        </L7p:HttpRoutingAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="codeResult"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/codRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/desRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Expression2 stringValue="0"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:RemoveElement>
                                    <L7p:ElementFromVariable stringValue="codeResult.elements[0]"/>
                                    <L7p:ElementToInsertVariable stringValue=""/>

                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:RemoveElement>
                                    <L7p:RemoveElement>
                                    <L7p:ElementFromVariable stringValue="descriptionDetail.elements[0]"/>
                                    <L7p:ElementToInsertVariable stringValue=""/>

                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:RemoveElement>
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>

                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:MsgVarPrefix stringValue="xslt2"/>

                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                    </L7p:XslTransformation>
                                    <wsp:OneOrMore wsp:Usage="Required">
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${correo}"/>
                                    <L7p:Expression2 stringValue=""/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">

                                    <L7p:CaseSensitive booleanValue="false"/>

                                    <L7p:Operator operator="EMPTY"/>

                                    <L7p:RightValue stringValue=""/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                    </L7p:SetVariable>
                                    <L7p:EvaluateJsonPathExpression>
                                    <L7p:Expression stringValue=".Envelope.Body.getDocumentoAsExcelResponse.return"/>

                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:EvaluateJsonPathExpression>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoke2pzb25QYXRoLnJlc3VsdH0KfQ=="/>

                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                    </L7p:HardcodedResponse>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Encapsulated>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9Cn0="/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                    </L7p:HardcodedResponse>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>

                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Encapsulated>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:HardcodedResponse>

                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoiZXhjZWwiOiJudWxsIgp9"/>

                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                    </L7p:HardcodedResponse>
                                    </wsp:All>
                                    </wsp:OneOrMore>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                    </L7p:SetVariable>
                                    <L7p:EvaluateJsonPathExpression>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression stringValue=".Envelope.Body.getDocumentoAsExcelResponse.return"/>

                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:EvaluateJsonPathExpression>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                    </L7p:Regex>
                                    <L7p:Encapsulated>
                                    <L7p:Enabled booleanValue="false"/>

                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>

                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                    </L7p:Encapsulated>
                                    <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoke2pzb25QYXRoLnJlc3VsdH0KfQ=="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                    </L7p:HardcodedResponse>
                                    </wsp:All>
                                    <wsp:All wsp:Usage="Required">
                                    <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="int"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                    </L7p:ComparisonAssertion>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                    </L7p:SetVariable>
                                    <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                    </L7p:SetVariable>
                                    <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                    </L7p:AuditDetailAssertion>
                                    <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${codeResult.result}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail.result}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                    </L7p:CustomizeErrorResponse>
                                    <L7p:RaiseError/>
                                    <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                    </L7p:assertionComment>
                                    </wsp:All>
                                </wsp:OneOrMore>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/S:Body/S:Fault/detail/ns2:exception/message"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns20"/>
                                    <L7p:value stringValue="http://ws.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://jax-ws.dev.java.net/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns3"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> Error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="//Con e-Mail"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Enabled booleanValue="false"/>
                            <L7p:Expression1 stringValue="${request.http.parameter.email}"/>
                            <L7p:Expression2 stringValue="1"/>
                            <L7p:Operator operator="EMPTY"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="EMPTY"/>
                                    <L7p:RightValue stringValue="1"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:HtmlFormDataAssertion>
                                    <L7p:AllowGet booleanValue="true"/>
                                    <L7p:DisallowOtherFields booleanValue="true"/>
                                    <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="documentoGUID"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="true"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:Name stringValue="email"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="format"/>
                                    </L7p:item>
                                    <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="origen"/>
                                    </L7p:item>
                                    </L7p:FieldSpecs>
                                </L7p:HtmlFormDataAssertion>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDAw"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="UGFyw6FtZXRyb3MgaW5jb3JyZWN0b3Mu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBsYSBVUkkgaW52w6FsaWRhLg=="/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="400"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                            </wsp:All>
                            <L7p:assertionComment>
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="HTML Form - Validar ParÃ¡metros"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:assertionComment>
                        </wsp:OneOrMore>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyIC8+DQogICA8c29hcGVudjpCb2R5Pg0KICAgICAgPHBjczpnZXREb2N1bWVudG9Bc0V4Y2VsPg0KICAgICAgICAgPGRvY3VtZW50b0dVSUQ+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmRvY3VtZW50b308L2RvY3VtZW50b0dVSUQ+DQogICAgICAgICA8ZW1haWw+PC9lbWFpbD4NCiAgICAgICAgIDxvcmlnZW4+JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLm9yaWdlbn08L29yaWdlbj4NCiAgICAgIDwvcGNzOmdldERvY3VtZW50b0FzRXhjZWw+DQogICA8L3NvYXBlbnY6Qm9keT4NCjwvc29hcGVudjpFbnZlbG9wZT4="/>
                            <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="xmlMessage"/>
                        </L7p:SetVariable>
                        <L7p:HttpRoutingAssertion>
                            <L7p:FailOnErrorStatus booleanValue="false"/>
                            <L7p:HttpMethod httpMethod="POST"/>
                            <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/Billing/BillingCons/ConsultaFacturas/bil_t_obtenerfacturapcsfijaexcelps"/>
                            <L7p:ProxyPassword stringValueNull="null"/>
                            <L7p:ProxyUsername stringValueNull="null"/>
                            <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Cookie"/>
                                    </L7p:item>
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="SOAPAction"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:RequestHeaderRules>
                            <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                            <L7p:RequestParamRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included"/>
                            </L7p:RequestParamRules>
                            <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                                <L7p:ForwardAll booleanValue="true"/>
                                <L7p:Rules httpPassthroughRules="included">
                                    <L7p:item httpPassthroughRule="included">
                                    <L7p:Name stringValue="Set-Cookie"/>
                                    </L7p:item>
                                </L7p:Rules>
                            </L7p:ResponseHeaderRules>
                            <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                            <L7p:SamlAssertionVersion intValue="2"/>
                        </L7p:HttpRoutingAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="codeResult"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/codRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentoAsExcelResponse/return/desRes"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                </L7p:SetVariable>
                                <L7p:EvaluateJsonPathExpression>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:Expression stringValue=".return"/>
                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:EvaluateJsonPathExpression>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Encapsulated>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                </L7p:Encapsulated>
                                <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZVJlc3VsdC5yZXN1bHR9IiwKCSJkZXNjcmlwdGlvbiI6IiR7ZGVzY3JpcHRpb259IiwKCSJkZXNjcmlwdGlvbkRldGFpbCI6IiR7ZGVzY3JpcHRpb25EZXRhaWwucmVzdWx0fSIsCgkicmVzcG9uc2VUaW1lc3RhbXAiOiIke3Jlc3BvbnNlVGltZXN0YW1wfSIKCX0KfQ=="/>
                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                </L7p:HardcodedResponse>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                                    <L7p:Expression2 stringValue="200"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:RightValue stringValue="200"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:ResponseXpathAssertion>
                                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                                    <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                                    <L7p:XpathExpression xpathExpressionValue="included">
                                    <L7p:Expression stringValue="/soapenv:Envelope/S:Body/S:Fault/detail/ns2:exception/message"/>
                                    <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns20"/>
                                    <L7p:value stringValue="http://ws.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://jax-ws.dev.java.net/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns3"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                    </L7p:Namespaces>
                                    <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                                    </L7p:XpathExpression>
                                </L7p:ResponseXpathAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> Error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="//Sin e-Mail"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="//LÃ³gica de documentsCustomerBills(EXCEL)"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:HtmlFormDataAssertion>
                            <L7p:AllowGet booleanValue="true"/>
                            <L7p:DisallowOtherFields booleanValue="true"/>
                            <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                                <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="cuenta"/>
                                </L7p:item>
                                <L7p:item htmlFormFieldSpec="included">
                                    <L7p:AllowEmpty boxedBooleanValue="false"/>
                                    <L7p:AllowedLocation fieldLocation="requestUrl"/>
                                    <L7p:DataType fieldDataType="any"/>
                                    <L7p:MaxOccurs intValue="1"/>
                                    <L7p:MinOccurs intValue="1"/>
                                    <L7p:Name stringValue="origen"/>
                                </L7p:item>
                            </L7p:FieldSpecs>
                        </L7p:HtmlFormDataAssertion>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="NDAw"/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="UGFyw6FtZXRyb3MgaW5jb3JyZWN0b3Mu"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBsYSBVUkkgaW52w6FsaWRhLg=="/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                            <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="400"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:RaiseError/>
                    </wsp:All>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="HTML Form - Validar ParÃ¡metros"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:OneOrMore>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnBjcz0iaHR0cDovL3Bjc2Nzdi5wY3MuaW50ZWxpZGF0YS5jbC8iPg0KICAgPHNvYXBlbnY6SGVhZGVyLz4NCiAgIDxzb2FwZW52OkJvZHk+DQogICAgICA8cGNzOmdldERvY3VtZW50b3M+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8Y3VlbnRhPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5jdWVudGF9PC9jdWVudGE+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8b3JpZ2VuPiR7cmVxdWVzdC5odHRwLnBhcmFtZXRlci5vcmlnZW59PC9vcmlnZW4+DQogICAgICA8L3BjczpnZXREb2N1bWVudG9zPg0KICAgPC9zb2FwZW52OkJvZHk+DQo8L3NvYXBlbnY6RW52ZWxvcGU+"/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="xmlMessage"/>
                </L7p:SetVariable>
                <L7p:HttpRoutingAssertion>
                    <L7p:FailOnErrorStatus booleanValue="false"/>
                    <L7p:HttpMethod httpMethod="POST"/>
                    <L7p:ProtectedServiceUrl stringValue="http://${gateway.esb.hostname}/Billing/BillingCons/ConsultaFacturas/bil_t_obtenerfacturapcsfijaps"/>
                    <L7p:ProxyPassword stringValueNull="null"/>
                    <L7p:ProxyUsername stringValueNull="null"/>
                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Cookie"/>
                            </L7p:item>
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="SOAPAction"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:RequestHeaderRules>
                    <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included"/>
                    </L7p:RequestParamRules>
                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Set-Cookie"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:ResponseHeaderRules>
                    <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                    <L7p:SamlAssertionVersion intValue="2"/>
                </L7p:HttpRoutingAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                            <L7p:Expression2 stringValue="200"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="codeResult"/>
                            <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentosResponse/return/codRes"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="descriptionDetail"/>
                            <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/S:Envelope/S:Body/ns2:getDocumentosResponse/return/desRes"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://pcscsv.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Expression2 stringValue="0"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:RemoveElement>
                                    <L7p:ElementFromVariable stringValue="codeResult.elements[0]"/>
                                    <L7p:ElementToInsertVariable stringValue=""/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:RemoveElement>
                                <L7p:RemoveElement>
                                    <L7p:ElementFromVariable stringValue="descriptionDetail.elements[0]"/>
                                    <L7p:ElementToInsertVariable stringValue=""/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:RemoveElement>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:XslTransformation>
                                    <L7p:Direction intValue="-1"/>
                                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                                    <L7p:ResourceInfo staticResourceInfo="included">
                                    <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                                    </L7p:ResourceInfo>
                                    <L7p:Target target="OTHER"/>
                                    <L7p:TransformName stringValue=""/>
                                    <L7p:XsltVersion stringValue="1.0"/>
                                </L7p:XslTransformation>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                                    <L7p:DataType variableDataType="message"/>
                                    <L7p:VariableToSet stringValue="responseJson"/>
                                </L7p:SetVariable>
                                <L7p:EvaluateJsonPathExpression>
                                    <L7p:Expression stringValue=".Envelope.Body.getDocumentosResponse.return.docs"/>
                                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:EvaluateJsonPathExpression>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                                    <L7p:Regex stringValue="^(.)|}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:Regex>
                                    <L7p:AutoTarget booleanValue="false"/>
                                    <L7p:Enabled booleanValue="false"/>
                                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                                    <L7p:Regex stringValue="^\{|^}$"/>
                                    <L7p:Replace booleanValue="true"/>
                                    <L7p:Replacement stringValue=""/>
                                    <L7p:Target target="OTHER"/>
                                </L7p:Regex>
                                <L7p:Encapsulated>
                                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                                    <L7p:Parameters mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                    </L7p:entry>
                                    </L7p:Parameters>
                                </L7p:Encapsulated>
                                <L7p:HardcodedResponse>
                                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoke2pzb25QYXRoLnJlc3VsdH0KfQ=="/>
                                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                                </L7p:HardcodedResponse>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Expression1 stringValue="${codeResult.result}"/>
                                    <L7p:Operator operatorNull="null"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item dataType="included">
                                    <L7p:Type variableDataType="int"/>
                                    </L7p:item>
                                    <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Negated booleanValue="true"/>
                                    <L7p:RightValue stringValue="0"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="NDIy"/>
                                    <L7p:VariableToSet stringValue="code"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                                    <L7p:VariableToSet stringValue="description"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                                </L7p:SetVariable>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                                    <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${codeResult.result}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail.result}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="422"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                                <L7p:assertionComment>
                                    <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="error de negocio"/>
                                    </L7p:entry>
                                    </L7p:Properties>
                                </L7p:assertionComment>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All L7p:Enabled="false" wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                            <L7p:Expression2 stringValue="200"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="200"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:XslTransformation>
                            <L7p:Direction intValue="-1"/>
                            <L7p:MsgVarPrefix stringValue="xslt2"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:ResourceInfo staticResourceInfo="included">
                                <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                            </L7p:ResourceInfo>
                            <L7p:Target target="OTHER"/>
                            <L7p:TransformName stringValue=""/>
                            <L7p:XsltVersion stringValue="1.0"/>
                        </L7p:XslTransformation>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                            <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="responseJson"/>
                        </L7p:SetVariable>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".return"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtjb2RlUmVzdWx0LnJlc3VsdH0="/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="T3BlcmFjacOzbiBleGl0b3Nh"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                            <L7p:Regex stringValue="^(.)|}$"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiJHtkZXNjcmlwdGlvbkRldGFpbH0iLAoJInJlc3BvbnNlVGltZXN0YW1wIjoiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoke2pzb25QYXRoLnJlc3VsdH0KfQ=="/>
                            <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> OperaciÃ³n Exitosa"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                            <L7p:Expression2 stringValue="200"/>
                            <L7p:Operator operator="NE"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:Operator operator="NE"/>
                                    <L7p:RightValue stringValue="200"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="descriptionDetail"/>
                            <L7p:XmlMsgSrc stringValue="serviceResponse"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/soapenv:Envelope/S:Body/S:Fault/detail/ns2:exception/message"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="ns20"/>
                                    <L7p:value stringValue="http://ws.pcs.intelidata.cl/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="S"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soapenv"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns2"/>
                                    <L7p:value stringValue="http://jax-ws.dev.java.net/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns3"/>
                                    <L7p:value stringValue="http://www.w3.org/2003/05/soap-envelope"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="NDIy"/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="RW50aWRhZCBubyBwcm9jZXNhZGEu"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbkRldGFpbC5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                            <L7p:Detail stringValue="IDTRANSACTION: ${requestId} SERVICE: ${httpRouting.url} LATENCY: ${httpRouting.latency} HTTP STATUS: ${httpRouting.reasonCode} DESCRIPTION: ${description} DESCRIPTION: ${descriptionDetail} CODE: ${code} BODY: ${serviceResponse.mainpart} REQUEST:${request.maintpart} "/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="422"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:RaiseError/>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> Error de negocio"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="//LÃ³gica de documentsCustomerBills"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="14295f18-da19-4f0e-9643-a8c30b3544dc"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="CodeStatus"/>
                </L7p:Encapsulated>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtodHRwUm91dGluZy5yZWFzb25Db2RlfQ=="/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtjb2RlRGVzY3JpcHRpb259"/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".SourceError.description"/>
                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                    <L7p:Target target="OTHER"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtqc29uUGF0aC5yZXN1bHR9"/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
            </wsp:All>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="1b3f18a3-5e88-4cae-9fae-44b459727ac1"/>
            </L7p:Include>
        </wsp:OneOrMore>
    </wsp:All>
</wsp:Policy>