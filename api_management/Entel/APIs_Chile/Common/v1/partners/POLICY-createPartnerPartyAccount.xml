<?xml version="1.0" encoding="UTF-8"?>
<wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <wsp:All wsp:Usage="Required">
        <wsp:OneOrMore L7p:Enabled="false" wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="//Valida Datos Entrada"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="NDAw"/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="U29saWNpdHVkIGluY29ycmVjdGEu"/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBKU09OIG5vIGVzIHbDoWxpZGEu"/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:AuditDetailAssertion>
                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                    <L7p:LoggingOnly booleanValue="true"/>
                </L7p:AuditDetailAssertion>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                    <L7p:HttpStatus stringValue="400"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue=">>400 - Solicitud Incorrecta"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="//Valida Parametros Entrada"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="371f66e9-a471-4dfb-8e78-07c793ea10d3"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="Compose Bus Header"/>
                    <L7p:Parameters mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="format"/>
                            <L7p:value stringValue="XML"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="operationCode"/>
                            <L7p:value stringValue="SASS100223"/>
                        </L7p:entry>
                    </L7p:Parameters>
                </L7p:Encapsulated>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".id"/>
                    <L7p:VariablePrefix stringValue="id"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".type"/>
                    <L7p:VariablePrefix stringValue="type"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".name"/>
                    <L7p:VariablePrefix stringValue="name"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".technicalBlock"/>
                    <L7p:VariablePrefix stringValue="technicalBlock"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".startDate"/>
                    <L7p:VariablePrefix stringValue="startDate"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".endDate"/>
                    <L7p:VariablePrefix stringValue="endDate"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".technicalBlockReason"/>
                    <L7p:VariablePrefix stringValue="technicalBlockReason"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".balanceType"/>
                    <L7p:VariablePrefix stringValue="balanceType"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".distributorBalance"/>
                    <L7p:VariablePrefix stringValue="distributorBalance"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".isCorrelative"/>
                    <L7p:VariablePrefix stringValue="isCorrelative"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".correlativeStartRange"/>
                    <L7p:VariablePrefix stringValue="correlativeStartRange"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".parentPartnerId"/>
                    <L7p:VariablePrefix stringValue="parentPartnerId"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".maxRefillError"/>
                    <L7p:VariablePrefix stringValue="maxRefillError"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".maxRefillRejected"/>
                    <L7p:VariablePrefix stringValue="maxRefillRejected"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".qtdRefillError"/>
                    <L7p:VariablePrefix stringValue="qtdRefillError"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".qtdRefillRejected"/>
                    <L7p:VariablePrefix stringValue="qtdRefillRejected"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".allowsCharge"/>
                    <L7p:VariablePrefix stringValue="allowsCharge"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".partnerExternalid"/>
                    <L7p:VariablePrefix stringValue="partnerExternalid"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".qtdRefillErrorUpdate"/>
                    <L7p:VariablePrefix stringValue="qtdRefillErrorUpdate"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".qtdRefillRejectedUpdate"/>
                    <L7p:VariablePrefix stringValue="qtdRefillRejectedUpdate"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".thresHold"/>
                    <L7p:VariablePrefix stringValue="thresHold"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".ownerEmail"/>
                    <L7p:VariablePrefix stringValue="ownerEmail"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".ownerPhone"/>
                    <L7p:VariablePrefix stringValue="ownerPhone"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".partnerBalanceUpdate"/>
                    <L7p:VariablePrefix stringValue="partnerBalanceUpdate"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".ipRecharge"/>
                    <L7p:VariablePrefix stringValue="ipRecharge"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".ipConciliationPrimary"/>
                    <L7p:VariablePrefix stringValue="ipConciliationPrimary"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".ipConciliationSecundary"/>
                    <L7p:VariablePrefix stringValue="ipConciliationSecundary"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXA6RW52ZWxvcGUgeG1sbnM6c29hcD0iaHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3BlIiB4bWxuczp2MT0iaHR0cDovL3d3dy5lbnRlbC5jbC9FQk0vQ3JlYXRlUGFydG5lclBhcnR5QWNjb3VudC92MSIgeG1sbnM6djExPSJodHRwOi8vd3d3LmVudGVsLmNsL0VTTy9NZXNzYWdlSGVhZGVyL3YxIiB4bWxuczp2Mj0iaHR0cDovL3d3dy5lbnRlbC5jbC9FU08vUmVzdWx0L3YyIiB4bWxuczp2MTI9Imh0dHA6Ly93d3cuZW50ZWwuY2wvRVNPL0Vycm9yL3YxIj4NCiAgIDxzb2FwOkhlYWRlci8+DQogICA8c29hcDpCb2R5Pg0KICAgICAgPHYxOkNyZWF0ZVBhcnRuZXJQYXJ0eUFjY291bnRfUkVRPg0KICAgICAgICAgICAgICAgJHtoZWFkZXJ9DQogICAgICAgICAgIDx2MTpCb2R5Pg0KICAgICAgICAgICAgPHYxOlBhcnRuZXI+DQogICAgICAgICAgICAgICA8djE6aWQ+JHtpZC5yZXN1bHR9PC92MTppZD4NCiAgICAgICAgICAgICAgIDx2MTp0eXBlPiR7dHlwZS5yZXN1bHR9PC92MTp0eXBlPg0KICAgICAgICAgICAgICAgPHYxOm5hbWU+JHtuYW1lLnJlc3VsdH08L3YxOm5hbWU+DQogICAgICAgICAgICAgICA8djE6dGVjaG5pY2FsQmxvY2s+JHt0ZWNobmljYWxCbG9jay5yZXN1bHR9PC92MTp0ZWNobmljYWxCbG9jaz4NCiAgICAgICAgICAgICAgIDx2MTpzdGFydERhdGU+JHtzdGFydERhdGUucmVzdWx0fTwvdjE6c3RhcnREYXRlPg0KICAgICAgICAgICAgICAgPHYxOmVuZERhdGU+JHtlbmREYXRlLnJlc3VsdH08L3YxOmVuZERhdGU+DQogICAgICAgICAgICAgICA8djE6dGVjaG5pY2FsQmxvY2tSZWFzb24+JHt0ZWNobmljYWxCbG9ja1JlYXNvbi5yZXN1bHR9PC92MTp0ZWNobmljYWxCbG9ja1JlYXNvbj4NCiAgICAgICAgICAgICAgIDx2MTpiYWxhbmNlVHlwZT4ke2JhbGFuY2VUeXBlLnJlc3VsdH08L3YxOmJhbGFuY2VUeXBlPg0KICAgICAgICAgICAgICAgPHYxOmRpc3RyaWJ1dG9yQmFsYW5jZT4ke2Rpc3RyaWJ1dG9yQmFsYW5jZS5yZXN1bHR9PC92MTpkaXN0cmlidXRvckJhbGFuY2U+DQogICAgICAgICAgICAgICA8djE6aXNDb3JyZWxhdGl2ZT4ke2lzQ29ycmVsYXRpdmUucmVzdWx0fTwvdjE6aXNDb3JyZWxhdGl2ZT4NCiAgICAgICAgICAgICAgIDx2MTpjb3JyZWxhdGl2ZVN0YXJ0UmFuZ2U+JHtjb3JyZWxhdGl2ZVN0YXJ0UmFuZ2UucmVzdWx0fTwvdjE6Y29ycmVsYXRpdmVTdGFydFJhbmdlPg0KICAgICAgICAgICAgICAgPHYxOnBhcmVudFBhcnRuZXJJZD4ke3BhcmVudFBhcnRuZXJJZC5yZXN1bHR9PC92MTpwYXJlbnRQYXJ0bmVySWQ+DQogICAgICAgICAgICAgICA8djE6bWF4UmVmaWxsRXJyb3I+JHttYXhSZWZpbGxFcnJvci5yZXN1bHR9PC92MTptYXhSZWZpbGxFcnJvcj4NCiAgICAgICAgICAgICAgIDx2MTptYXhSZWZpbGxSZWplY3RlZD4ke21heFJlZmlsbFJlamVjdGVkLnJlc3VsdH08L3YxOm1heFJlZmlsbFJlamVjdGVkPg0KICAgICAgICAgICAgICAgPHYxOnF0ZFJlZmlsbEVycm9yPiR7cXRkUmVmaWxsRXJyb3IucmVzdWx0fTwvdjE6cXRkUmVmaWxsRXJyb3I+DQogICAgICAgICAgICAgICA8djE6cXRkUmVmaWxsUmVqZWN0ZWQ+JHtxdGRSZWZpbGxSZWplY3RlZC5yZXN1bHR9PC92MTpxdGRSZWZpbGxSZWplY3RlZD4NCiAgICAgICAgICAgICAgIDx2MTphbGxvd3NDaGFyZ2U+JHthbGxvd3NDaGFyZ2UucmVzdWx0fTwvdjE6YWxsb3dzQ2hhcmdlPg0KICAgICAgICAgICAgICAgPHYxOnBhcnRuZXJFeHRlcm5hbGlkPiR7cGFydG5lckV4dGVybmFsaWQucmVzdWx0fTwvdjE6cGFydG5lckV4dGVybmFsaWQ+DQogICAgICAgICAgICAgICA8djE6cXRkUmVmaWxsRXJyb3JVcGRhdGU+JHtxdGRSZWZpbGxFcnJvclVwZGF0ZS5yZXN1bHR9PC92MTpxdGRSZWZpbGxFcnJvclVwZGF0ZT4NCiAgICAgICAgICAgICAgIDx2MTpxdGRSZWZpbGxSZWplY3RlZFVwZGF0ZT4ke3F0ZFJlZmlsbFJlamVjdGVkVXBkYXRlLnJlc3VsdH08L3YxOnF0ZFJlZmlsbFJlamVjdGVkVXBkYXRlPg0KICAgICAgICAgICAgICAgPHYxOnRocmVzSG9sZD4ke3RocmVzSG9sZC5yZXN1bHR9PC92MTp0aHJlc0hvbGQ+DQogICAgICAgICAgICAgICA8djE6b3duZXJFbWFpbD4ke293bmVyRW1haWwucmVzdWx0fTwvdjE6b3duZXJFbWFpbD4NCiAgICAgICAgICAgICAgIDx2MTpvd25lclBob25lPiR7b3duZXJQaG9uZS5yZXN1bHR9PC92MTpvd25lclBob25lPg0KICAgICAgICAgICAgICAgPHYxOnBhcnRuZXJCYWxhbmNlVXBkYXRlPiR7cGFydG5lckJhbGFuY2VVcGRhdGUucmVzdWx0fTwvdjE6cGFydG5lckJhbGFuY2VVcGRhdGU+DQogICAgICAgICAgICAgICA8djE6aXBSZWNoYXJnZT4ke2lwUmVjaGFyZ2UucmVzdWx0fTwvdjE6aXBSZWNoYXJnZT4NCiAgICAgICAgICAgICAgIDx2MTppcENvbmNpbGlhdGlvblByaW1hcnk+JHtpcENvbmNpbGlhdGlvblByaW1hcnkucmVzdWx0fTwvdjE6aXBDb25jaWxpYXRpb25QcmltYXJ5Pg0KICAgICAgICAgICAgICAgPHYxOmlwQ29uY2lsaWF0aW9uU2VjdW5kYXJ5PiR7aXBDb25jaWxpYXRpb25TZWN1bmRhcnkucmVzdWx0fTwvdjE6aXBDb25jaWxpYXRpb25TZWN1bmRhcnk+DQogICAgICAgICAgICA8L3YxOlBhcnRuZXI+DQogICAgICAgICA8L3YxOkJvZHk+DQogICAgICA8L3YxOkNyZWF0ZVBhcnRuZXJQYXJ0eUFjY291bnRfUkVRPg0KICAgPC9zb2FwOkJvZHk+DQo8L3NvYXA6RW52ZWxvcGU+"/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="message"/>
                </L7p:SetVariable>
                <L7p:HttpRoutingAssertion>
                    <L7p:FailOnErrorStatus booleanValue="false"/>
                    <L7p:HttpMethod httpMethod="POST"/>
                    <L7p:ProtectedServiceUrl stringValue="http://${gateway.eUSB.tde.hostname}/ES/11/CreatePartnerPartyAccount/v1"/>
                    <L7p:ProxyPassword stringValueNull="null"/>
                    <L7p:ProxyUsername stringValueNull="null"/>
                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Cookie"/>
                            </L7p:item>
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="SOAPAction"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:RequestHeaderRules>
                    <L7p:RequestMsgSrc stringValue="message"/>
                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included"/>
                    </L7p:RequestParamRules>
                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Set-Cookie"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:ResponseHeaderRules>
                    <L7p:SamlAssertionVersion intValue="2"/>
                </L7p:HttpRoutingAssertion>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="2"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="RESPONSE"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="2"/>
                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.)]">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="RESPONSE"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:Regex>
                    <L7p:AssertionComment assertionComment="included">
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="Arregla el Body"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:AssertionComment>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:Enabled booleanValue="false"/>
                    <L7p:Regex stringValue="null"/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue="&quot;&quot;"/>
                    <L7p:Target target="RESPONSE"/>
                </L7p:Regex>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/>
                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="jsonPath"/>
                </L7p:SetVariable>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".Result.status"/>
                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                    <L7p:Target target="OTHER"/>
                    <L7p:VariablePrefix stringValue="code"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".Result.description"/>
                    <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                    <L7p:Target target="OTHER"/>
                    <L7p:VariablePrefix stringValue="descriptionDetail"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                    <L7p:Expression2 stringValue="200"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="200"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${code.result}"/>
                            <L7p:Expression2 stringValue="OK"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="OK"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".CreateCustomerBillingDemand_RSP.Body"/>
                            <L7p:OtherTargetMessageVariable stringValue="jsonPath"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="bodyResponse"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:Regex>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Arregla el Body"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="bodyResponse.result"/>
                            <L7p:Regex stringValue="^\{|\}$"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.elapsedTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZS5yZXN1bHR9IiwKCSJkZXNjcmlwdGlvbiI6Ik9LIiwKCSJkZXNjcmlwdGlvbkRldGFpbCI6IiR7ZGVzY3JpcHRpb25EZXRhaWwucmVzdWx0fSIsCgkicmVzcG9uc2VUaW1lc3RhbXAiOiIke3Jlc3BvbnNlVGltZXN0YW1wfSIKCX0sCiR7Ym9keVJlc3BvbnNlLnJlc3VsdH0KfQo="/>
                            <L7p:ResponseContentType stringValue="application/json; charset=utf-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> 200 - OK"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue=">> 200 - NOK"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="//Ejecucion Principal"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:OneOrMore>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="//Controla errores de Negocio"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="1b3f18a3-5e88-4cae-9fae-44b459727ac1"/>
            </L7p:Include>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="//Logica"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
    </wsp:All>
</wsp:Policy>