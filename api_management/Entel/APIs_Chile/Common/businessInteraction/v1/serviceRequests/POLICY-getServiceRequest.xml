<?xml version="1.0" encoding="UTF-8"?>
<wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <wsp:All wsp:Usage="Required">
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:JSONSchema>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[{
  "definitions": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/root.json",
  "type": "object",
  "title": "The Root Schema",
  "required": [
   
  ],
  "properties": {
    "RequestHeader": {
      "$id": "#/properties/RequestHeader",
      "type": "object",
      "title": "The Requestheader Schema",
      "required": [
     
      ],
      "properties": {
        "Consumer": {
          "$id": "#/properties/RequestHeader/properties/Consumer",
          "type": "object",
          "title": "The Consumer Schema",
          "required": [
            "sysCode",
            "enterpriseCode",
            "countryCode"
          ],
          "properties": {
            "sysCode": {
              "$id": "#/properties/RequestHeader/properties/Consumer/properties/sysCode",
              "type": "string",
              "title": "The Syscode Schema",
              "default": "",
              "examples": [
                "CHL-ONECLICK"
              ],
              "pattern": "^(.*)$"
            },
            "enterpriseCode": {
              "$id": "#/properties/RequestHeader/properties/Consumer/properties/enterpriseCode",
              "type": "string",
              "title": "The Enterprisecode Schema",
              "default": "",
              "examples": [
                "ENTEL-CHL"
              ],
              "pattern": "^(.*)$"
            },
            "countryCode": {
              "$id": "#/properties/RequestHeader/properties/Consumer/properties/countryCode",
              "type": "string",
              "title": "The Countrycode Schema",
              "default": "",
              "examples": [
                "CHL"
              ],
              "pattern": "^(.*)$"
            }
          }
        },
        "Trace": {
          "$id": "#/properties/RequestHeader/properties/Trace",
          "type": "object",
          "title": "The Trace Schema",
          "required": [
            "clientReqTimestamp",
            "reqTimestamp",
            "processID",
            "eventID",
            "sourceID",
            "correlationEventID",
            "conversationID",
            "correlationID",
            "Service"
          ],
          "properties": {
            "clientReqTimestamp": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/clientReqTimestamp",
              "type": "string",
              "title": "The Clientreqtimestamp Schema",
              "default": "",
              "examples": [
                "2018-09-11T18:48:24.000Z"
              ],
              "pattern": "^(.*)$"
            },
            "reqTimestamp": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/reqTimestamp",
              "type": "string",
              "title": "The Reqtimestamp Schema",
              "default": "",
              "examples": [
                "2018-09-11T15:48:24.354-03:00"
              ],
              "pattern": "^(.*)$"
            },
            "processID": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/processID",
              "type": "string",
              "title": "The Processid Schema",
              "default": "",
              "examples": [
                "null_1536691704299"
              ],
              "pattern": "^(.*)$"
            },
            "eventID": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/eventID",
              "type": "string",
              "title": "The Eventid Schema",
              "default": "",
              "examples": [
                "null_1536691704299"
              ],
              "pattern": "^(.*)$"
            },
            "sourceID": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/sourceID",
              "type": "string",
              "title": "The Sourceid Schema",
              "default": "",
              "examples": [
                ""
              ],
              "pattern": "^(.*)$"
            },
            "correlationEventID": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/correlationEventID",
              "type": "string",
              "title": "The Correlationeventid Schema",
              "default": "",
              "examples": [
                "null_1536691704299"
              ],
              "pattern": "^(.*)$"
            },
            "conversationID": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/conversationID",
              "type": "string",
              "title": "The Conversationid Schema",
              "default": "",
              "examples": [
                "8e2f68e6-627a-4e2c-b3c8-fd2b9678661b"
              ],
              "pattern": "^(.*)$"
            },
            "correlationID": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/correlationID",
              "type": "string",
              "title": "The Correlationid Schema",
              "default": "",
              "examples": [
                ""
              ],
              "pattern": "^(.*)$"
            },
            "Service": {
              "$id": "#/properties/RequestHeader/properties/Trace/properties/Service",
              "type": "object",
              "title": "The Service Schema",
              "required": [
                "code",
                "name",
                "operation"
              ],
              "properties": {
                "code": {
                  "$id": "#/properties/RequestHeader/properties/Trace/properties/Service/properties/code",
                  "type": "string",
                  "title": "The Code Schema",
                  "default": "",
                  "examples": [
                    "CM020"
                  ],
                  "pattern": "^(.*)$"
                },
                "name": {
                  "$id": "#/properties/RequestHeader/properties/Trace/properties/Service/properties/name",
                  "type": "string",
                  "title": "The Name Schema",
                  "default": "",
                  "examples": [
                    "ServiceRequest"
                  ],
                  "pattern": "^(.*)$"
                },
                "operation": {
                  "$id": "#/properties/RequestHeader/properties/Trace/properties/Service/properties/operation",
                  "type": "string",
                  "title": "The Operation Schema",
                  "default": "",
                  "examples": [
                    "Get"
                  ],
                  "pattern": "^(.*)$"
                }
              }
            }
          }
        },
        "Channel": {
          "$id": "#/properties/RequestHeader/properties/Channel",
          "type": "object",
          "title": "The Channel Schema",
          "required": [
            "name",
            "mode"
          ],
          "properties": {
            "name": {
              "$id": "#/properties/RequestHeader/properties/Channel/properties/name",
              "type": "string",
              "title": "The Name Schema",
              "default": "",
              "examples": [
                "TP"
              ],
              "pattern": "^(.*)$"
            },
            "mode": {
              "$id": "#/properties/RequestHeader/properties/Channel/properties/mode",
              "type": "string",
              "title": "The Mode Schema",
              "default": "",
              "examples": [
                "PRESENCIAL"
              ],
              "pattern": "^(.*)$"
            }
          }
        }
      }
    },
    "Body": {
      "$id": "#/properties/Body",
      "type": "object",
      "title": "The Body Schema",
      "required": [
        "ServiceRequest"
      ],
      "properties": {
        "ServiceRequest": {
          "$id": "#/properties/Body/properties/ServiceRequest",
          "type": "object",
          "title": "The Servicerequest Schema",
          "required": [
            "Contact",
            "CustomerAccount",
            "IndividualIdentification",
            "PortabilityOrder",
            "destinyMSISDN"
          ],
          "properties": {
            "Contact": {
              "$id": "#/properties/Body/properties/ServiceRequest/properties/Contact",
              "type": "null",
              "title": "The Contact Schema",
              "default": null,
              "examples": [
                null
              ]
            },
            "CustomerAccount": {
              "$id": "#/properties/Body/properties/ServiceRequest/properties/CustomerAccount",
              "type": "null",
              "title": "The Customeraccount Schema",
              "default": null,
              "examples": [
                null
              ]
            },
            "IndividualIdentification": {
              "$id": "#/properties/Body/properties/ServiceRequest/properties/IndividualIdentification",
              "type": "object",
              "title": "The Individualidentification Schema",
              "required": [
                "number",
                "type"
              ],
              "properties": {
                "number": {
                  "$id": "#/properties/Body/properties/ServiceRequest/properties/IndividualIdentification/properties/number",
                  "type": "string",
                  "title": "The Number Schema",
                  "default": "",
                  "examples": [
                    "15006860-6"
                  ],
                  "pattern": "^(.*)$"
                },
                "type": {
                  "$id": "#/properties/Body/properties/ServiceRequest/properties/IndividualIdentification/properties/type",
                  "type": "string",
                  "title": "The Type Schema",
                  "default": "",
                  "examples": [
                    "RUT"
                  ],
                  "pattern": "^(.*)$"
                }
              }
            },
            "PortabilityOrder": {
              "$id": "#/properties/Body/properties/ServiceRequest/properties/PortabilityOrder",
              "type": "null",
              "title": "The Portabilityorder Schema",
              "default": null,
              "examples": [
                null
              ]
            },
            "destinyMSISDN": {
              "$id": "#/properties/Body/properties/ServiceRequest/properties/destinyMSISDN",
              "type": "null",
              "title": "The Destinymsisdn Schema",
              "default": null,
              "examples": [
                null
              ]
            }
          }
        }
      }
    }
  }
}]]></L7p:Document>
                    </L7p:ResourceInfo>
                </L7p:JSONSchema>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="QTE="/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="RXNxdWVtYSBJbmNvcnJlY3RvLg=="/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="RXN0cnVjdHVyYSBkZSBKc29uIGludsOhbGlkbw=="/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:AuditDetailAssertion>
                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog"/>
                    <L7p:Detail stringValue="TRANSACTION: ${requestId} CODE: ${code} DESCRIPTION: ${description} DETAIL: ${descriptionDetail}"/>
                    <L7p:LoggingOnly booleanValue="true"/>
                </L7p:AuditDetailAssertion>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                    <L7p:HttpStatus stringValue="400"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="Json Schema - Validar Parámetros"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".area"/>
                    <L7p:VariablePrefix stringValue="area"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".createdDate"/>
                    <L7p:VariablePrefix stringValue="createdDate"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".externalID"/>
                    <L7p:VariablePrefix stringValue="externalID"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".number"/>
                    <L7p:VariablePrefix stringValue="number"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".parentID"/>
                    <L7p:VariablePrefix stringValue="parentID"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".rowId"/>
                    <L7p:VariablePrefix stringValue="rowId"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".state"/>
                    <L7p:VariablePrefix stringValue="state"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".subArea"/>
                    <L7p:VariablePrefix stringValue="subArea"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".type"/>
                    <L7p:VariablePrefix stringValue="type"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".Contact.ID"/>
                    <L7p:VariablePrefix stringValue="contactId"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".CustomerAccount.ID"/>
                    <L7p:VariablePrefix stringValue="customerAccountId"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".IndividualIdentification.number"/>
                    <L7p:VariablePrefix stringValue="individualIdentificationNumber"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".IndividualIdentification.type"/>
                    <L7p:VariablePrefix stringValue="individualIdentificationType"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".PortabilityOrder.externalOrderNumber"/>
                    <L7p:VariablePrefix stringValue="portabilityOrderExternalOrderNumber"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".PortabilityOrder.messageType"/>
                    <L7p:VariablePrefix stringValue="portabilityOrderMessageType"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".destinyMSISDN.SN"/>
                    <L7p:VariablePrefix stringValue="destinyMsisdnSn"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAuaGVhZGVyLnJlcXVlc3RUaW1lc3RhbXB9"/>
                    <L7p:VariableToSet stringValue="Timestamp"/>
                </L7p:SetVariable>
                <L7p:Regex>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:OtherTargetMessageVariable stringValue="Timestamp"/>
                    <L7p:Regex stringValue="\-|T|\:|\."/>
                    <L7p:RegexVar stringValue="Timestamp"/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue=""/>
                    <L7p:Target target="OTHER"/>
                </L7p:Regex>
                <L7p:Regex>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:CaptureVar stringValue="Timestamp"/>
                    <L7p:OtherTargetMessageVariable stringValue="Timestamp"/>
                    <L7p:Regex stringValue="^................"/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue=""/>
                    <L7p:Target target="OTHER"/>
                </L7p:Regex>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0SWR9"/>
                    <L7p:VariableToSet stringValue="originEventID"/>
                </L7p:SetVariable>
                <L7p:Regex>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:IncludeEntireExpressionCapture booleanValue="false"/>
                    <L7p:OtherTargetMessageVariable stringValue="originEventID"/>
                    <L7p:Regex stringValue="\-"/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue=""/>
                    <L7p:Target target="OTHER"/>
                </L7p:Regex>
                <L7p:Regex>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:OtherTargetMessageVariable stringValue="originEventID"/>
                    <L7p:Regex stringValue="^...."/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue=""/>
                    <L7p:Target target="OTHER"/>
                </L7p:Regex>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="MDAwMA=="/>
                    <L7p:VariableToSet stringValue="originSystem"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="U0FTUzEwMDAzMA=="/>
                    <L7p:VariableToSet stringValue="operationCode"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXA6RW52ZWxvcGUgeG1sbnM6c29hcD0iaHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3BlIiB4bWxuczp2MT0iaHR0cDovL3d3dy5lbnRlbC5jbC9FQk0vU2VydmljZVJlcXVlc3QvR2V0L3YxIiB4bWxuczp2MTE9Imh0dHA6Ly93d3cuZW50ZWwuY2wvRVNPL01lc3NhZ2VIZWFkZXIvdjEiIHhtbG5zOnYyPSJodHRwOi8vd3d3LmVudGVsLmNsL0VTTy9SZXN1bHQvdjIiIHhtbG5zOnYxMj0iaHR0cDovL3d3dy5lbnRlbC5jbC9FU08vRXJyb3IvdjEiIHhtbG5zOnYxMz0iaHR0cDovL3d3dy5lbnRlbC5jbC9FQk8vU2VydmljZVJlcXVlc3QvdjEiIHhtbG5zOnYxND0iaHR0cDovL3d3dy5lbnRlbC5jbC9FQk8vQ29udGFjdC92MSIgeG1sbnM6djE1PSJodHRwOi8vd3d3LmVudGVsLmNsL0VCTy9DdXN0b21lckFjY291bnQvdjEiIHhtbG5zOnYxNj0iaHR0cDovL3d3dy5lbnRlbC5jbC9FQk8vSW5kaXZpZHVhbElkZW50aWZpY2F0aW9uL3YxIiB4bWxuczp2MTc9Imh0dHA6Ly93d3cuZW50ZWwuY2wvRUJPL1BvcnRhYmlsaXR5T3JkZXIvdjEiIHhtbG5zOnYxOD0iaHR0cDovL3d3dy5lbnRlbC5jbC9FQk8vTVNJU0ROL3YxIj4NCiAgIDxzb2FwOkhlYWRlci8+DQogICA8c29hcDpCb2R5Pg0KICAgICAgPHYxOkdldF9TZXJ2aWNlUmVxdWVzdF9SRVE+DQogICAgICAgICA8djExOlJlcXVlc3RIZWFkZXI+DQogICAgICAgICAgICA8djExOkNvbnN1bWVyIHN5c0NvZGU9IiR7cmVxdWVzdC5odHRwLmhlYWRlci5hcGxpY2F0aW9uQ29kZX0iIGVudGVycHJpc2VDb2RlPSJFTlRFTC0ke3JlcXVlc3QuaHR0cC5oZWFkZXIuY291bnRyeUNvZGV9IiBjb3VudHJ5Q29kZT0iJHtyZXF1ZXN0Lmh0dHAuaGVhZGVyLmNvdW50cnlDb2RlfSIvPg0KICAgICAgICAgICAgPHYxMTpUcmFjZSBjbGllbnRSZXFUaW1lc3RhbXA9IiR7cmVxdWVzdC5odHRwLmhlYWRlci5yZXF1ZXN0VGltZXN0YW1wfSIgZXZlbnRJRD0iJHtvcmlnaW5TeXN0ZW19JHtvcGVyYXRpb25Db2RlfSR7VGltZXN0YW1wfSR7b3JpZ2luRXZlbnRJZH0wMDAwIj4NCiAgICAgICAgICAgIDwvdjExOlRyYWNlPg0KICAgICAgICAgICAgDQogICAgICAgICA8L3YxMTpSZXF1ZXN0SGVhZGVyPg0KICAgICAgICAgPHYxOkJvZHk+DQogICAgICAgICAgICA8djE6U2VydmljZVJlcXVlc3Q+DQogICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICA8djEzOmFyZWE+JHthcmVhLnJlc3VsdH08L3YxMzphcmVhPg0KICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgPHYxMzpjcmVhdGVkRGF0ZT4ke2NyZWF0ZWREYXRlLnJlc3VsdH08L3YxMzpjcmVhdGVkRGF0ZT4NCiAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgIDx2MTM6ZXh0ZXJuYWxJRD4ke2V4dGVybmFsSUQucmVzdWx0fTwvdjEzOmV4dGVybmFsSUQ+DQogICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICA8djEzOm51bWJlcj4ke251bWJlci5yZXN1bHR9PC92MTM6bnVtYmVyPg0KICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgPHYxMzpwYXJlbnRJRD4ke3BhcmVudElELnJlc3VsdH08L3YxMzpwYXJlbnRJRD4NCiAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgIDx2MTM6cm93SWQ+JHtyb3dJZC5yZXN1bHR9PC92MTM6cm93SWQ+DQogICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICA8djEzOnN0YXRlPiR7c3RhdGUucmVzdWx0fTwvdjEzOnN0YXRlPg0KICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgPHYxMzpzdWJBcmVhPiR7c3ViQXJlYS5yZXN1bHR9PC92MTM6c3ViQXJlYT4NCiAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgIDx2MTM6dHlwZT4ke3R5cGUucmVzdWx0fTwvdjEzOnR5cGU+DQogICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICA8djE6Q29udGFjdD4NCiAgICAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgICAgIDx2MTQ6SUQ+JHtjb250YWN0SWQucmVzdWx0fTwvdjE0OklEPg0KICAgICAgICAgICAgICAgPC92MTpDb250YWN0Pg0KICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgPHYxOkN1c3RvbWVyQWNjb3VudD4NCiAgICAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgICAgIDx2MTU6SUQ+JHtjdXN0b21lckFjY291bnRJZC5yZXN1bHR9PC92MTU6SUQ+DQogICAgICAgICAgICAgICA8L3YxOkN1c3RvbWVyQWNjb3VudD4NCiAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgIDx2MTpJbmRpdmlkdWFsSWRlbnRpZmljYXRpb24+DQogICAgICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICAgICA8djE2Om51bWJlcj4ke2luZGl2aWR1YWxJZGVudGlmaWNhdGlvbk51bWJlci5yZXN1bHR9PC92MTY6bnVtYmVyPg0KICAgICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgICAgPHYxNjp0eXBlPiR7aW5kaXZpZHVhbElkZW50aWZpY2F0aW9uVHlwZS5yZXN1bHR9PC92MTY6dHlwZT4NCiAgICAgICAgICAgICAgIDwvdjE6SW5kaXZpZHVhbElkZW50aWZpY2F0aW9uPg0KICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgPHYxOlBvcnRhYmlsaXR5T3JkZXI+DQogICAgICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICAgICA8djE3OmV4dGVybmFsT3JkZXJOdW1iZXI+JHtwb3J0YWJpbGl0eU9yZGVyRXh0ZXJuYWxPcmRlck51bWJlci5yZXN1bHR9PC92MTc6ZXh0ZXJuYWxPcmRlck51bWJlcj4NCiAgICAgICAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgICAgICAgIDx2MTc6bWVzc2FnZVR5cGU+JHtwb3J0YWJpbGl0eU9yZGVyTWVzc2FnZVR5cGUucmVzdWx0fTwvdjE3Om1lc3NhZ2VUeXBlPg0KICAgICAgICAgICAgICAgPC92MTpQb3J0YWJpbGl0eU9yZGVyPg0KICAgICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgICAgPHYxOmRlc3RpbnlNU0lTRE4+DQogICAgICAgICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICAgICAgICA8djE4OlNOPiR7ZGVzdGlueU1zaXNkblNuLnJlc3VsdH08L3YxODpTTj4NCiAgICAgICAgICAgICAgIDwvdjE6ZGVzdGlueU1TSVNETj4NCiAgICAgICAgICAgIDwvdjE6U2VydmljZVJlcXVlc3Q+DQogICAgICAgICA8L3YxOkJvZHk+DQogICAgICA8L3YxOkdldF9TZXJ2aWNlUmVxdWVzdF9SRVE+DQogICA8L3NvYXA6Qm9keT4NCjwvc29hcDpFbnZlbG9wZT4="/>
                    <L7p:ContentType stringValue="application/soap+xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="xmlMessage"/>
                </L7p:SetVariable>
                <L7p:HttpRoutingAssertion>
                    <L7p:FailOnErrorStatus booleanValue="false"/>
                    <L7p:HttpMethod httpMethod="POST"/>
                    <L7p:ProtectedServiceUrl stringValue="http://${gateway.webPrepago.hostname}/serviceRequest"/>
                    <L7p:ProxyPassword stringValueNull="null"/>
                    <L7p:ProxyUsername stringValueNull="null"/>
                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Cookie"/>
                            </L7p:item>
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="SOAPAction"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:RequestHeaderRules>
                    <L7p:RequestMsgSrc stringValue="xmlMessage"/>
                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included"/>
                    </L7p:RequestParamRules>
                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Set-Cookie"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:ResponseHeaderRules>
                    <L7p:ResponseMsgDest stringValue="serviceResponse"/>
                    <L7p:SamlAssertionVersion intValue="2"/>
                </L7p:HttpRoutingAssertion>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="-1"/>
                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="OTHER"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="-1"/>
                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'movilCuenta']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="OTHER"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="responseJson"/>
                </L7p:SetVariable>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".Result.status"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                    <L7p:Target target="OTHER"/>
                    <L7p:VariablePrefix stringValue="status"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtzdGF0dXMucmVzdWx0fQ=="/>
                    <L7p:VariableToSet stringValue="status"/>
                </L7p:SetVariable>
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                    <L7p:Expression2 stringValue="200"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="200"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${status}"/>
                            <L7p:Expression2 stringValue="OK"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="OK"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".GetServiceRequest_RSP"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="bodyResult"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".Result.description"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="description"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbi5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="bodyResult.result"/>
                            <L7p:Regex stringValue="^\{|^}"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="200"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.routingTotalTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:HardcodedResponse>
                            <L7p:Base64ResponseBody stringValue="ewoJInJlc3VsdCI6IHsKCQkidHJhbnNhY3Rpb25JZCI6ICIke3JlcXVlc3RJZH0iLAoJCSJjb2RlIjogIiR7c3RhdHVzfSIsCgkJImRlc2NyaXB0aW9uRGV0YWlsIjogIiR7ZGVzY3JpcHRpb259IiwKCQkicmVzcG9uc2VUaW1lc3RhbXAiOiAiJHtyZXNwb25zZVRpbWVzdGFtcH0iCgl9LAoJIlNlcnZpY2VSZXF1ZXN0IjogewoJCSR7Ym9keVJlc3VsdC5yZXN1bHR9Cgl9"/>
                            <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                        </L7p:HardcodedResponse>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="operacion exitosa"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${status}"/>
                            <L7p:Expression2 stringValue="ERROR"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="ERROR"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".GetServiceRequest_RSP"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="bodyResult"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Enabled booleanValue="false"/>
                            <L7p:Expression stringValue=".GetServiceRequest_FRSP"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="bodyResult"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:Expression stringValue=".Result.description"/>
                            <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="description"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbi5yZXN1bHR9"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="bodyResult.result"/>
                            <L7p:Regex stringValue="^\{|^}"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue=""/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"description":"${status}",
	"descriptionDetail":"${description}",
	"responseTimestamp":"${responseTimestamp}"
	},
${bodyResult.result}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="422"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="422"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${request.elapsedTime}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:RaiseError/>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="error de negocio"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                    <L7p:Expression2 stringValue="500"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="500"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Evalua si el estado de la respuesta es Warning"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${resultStatus.result}"/>
                            <L7p:Expression2 stringValue="WARNING"/>
                            <L7p:ExpressionIsVariable booleanValue="false"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="WARNING"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Extrae el Body"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:Expression stringValue=".ResponseHeader.Result.SourceError.description"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="description"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Extrae el Body"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:Expression stringValue=".ResponseHeader.Result.SourceError.code"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="code"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="ew0KInJlc3VsdCI6ew0KCSJ0cmFuc2FjdGlvbklkIjoiJHtyZXF1ZXN0SWR9IiwNCgkiY29kZSI6IiR7Y29kZS5yZXN1bHR9IiwNCgkiZGVzY3JpcHRpb24iOiJFcnJvciBkZSBOZWdvY2lvIiwNCgkiZGVzY3JpcHRpb25EZXRhaWwiOiIke2Rlc2NyaXB0aW9uLnJlc3VsdH0iLA0KCSJyZXNwb25zZVRpbWVzdGFtcCI6IiR7cmVzcG9uc2VUaW1lc3RhbXB9Ig0KCX0NCn0="/>
                            <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                            <L7p:DataType variableDataType="message"/>
                            <L7p:VariableToSet stringValue="serviceResponse"/>
                        </L7p:SetVariable>
                        <L7p:AuditDetailAssertion>
                            <L7p:CustomLoggerSuffix stringValue="entel.api.syslog.error"/>
                            <L7p:Detail stringValue="REQUESTID: ${requestId} | EVENTID: ${eventId} | APIM ${service.name} Route Failed | IS STATUS: ${httpRouting.reasonCode} | IS URI: ${httpRouting.url} | IS REQUEST: ${&lt;&lt;request>>.mainpart} | IS RESPONSE: ${&lt;&lt;response>>.mainpart} | TIMESTAMP: ${request.time.local.yyyy-MM-dd'T'HH:mm:ss.SSS}"/>
                            <L7p:LoggingOnly booleanValue="true"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValue="${serviceResponse.mainpart}"/>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="422"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:RaiseError/>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Warning"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                    <wsp:All wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Evalua si el estado de la respuesta es OK"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${resultStatus.result}"/>
                            <L7p:Expression2 stringValue="ERROR"/>
                            <L7p:ExpressionIsVariable booleanValue="false"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="ERROR"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Extrae el Body"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:Expression stringValue=".ResponseHeader.Result.SourceError.code"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="code"/>
                        </L7p:EvaluateJsonPathExpression>
                        <L7p:EvaluateJsonPathExpression>
                            <L7p:AssertionComment assertionComment="included">
                                <L7p:Properties mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="Extrae el Body"/>
                                    </L7p:entry>
                                </L7p:Properties>
                            </L7p:AssertionComment>
                            <L7p:Expression stringValue=".ResponseHeader.Result.SourceError.description"/>
                            <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                            <L7p:Target target="OTHER"/>
                            <L7p:VariablePrefix stringValue="description"/>
                        </L7p:EvaluateJsonPathExpression>
                        <wsp:OneOrMore wsp:Usage="Required">
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:Expression1 stringValue="${code.result}"/>
                                    <L7p:Expression2 stringValue="500"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="500"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog.error"/>
                                    <L7p:Detail stringValue="REQUESTID: ${requestId} | EVENTID: ${eventId} | APIM ${service.name} Route Failed | IS STATUS: ${httpRouting.reasonCode} | IS URI: ${httpRouting.url} | IS REQUEST: ${&lt;&lt;request>>.mainpart} | IS RESPONSE: ${&lt;&lt;response>>.mainpart} | TIMESTAMP: ${request.time.local.yyyy-MM-dd'T'HH:mm:ss.SSS}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code.result}",
	"description":"Internal Server Error",
	"descriptionDetail":"${description.result}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                            </wsp:All>
                            <wsp:All wsp:Usage="Required">
                                <L7p:ComparisonAssertion>
                                    <L7p:Expression1 stringValue="${code.result}"/>
                                    <L7p:Expression2 stringValue="400"/>
                                    <L7p:ExpressionIsVariable booleanValue="false"/>
                                    <L7p:Predicates predicates="included">
                                    <L7p:item binary="included">
                                    <L7p:RightValue stringValue="400"/>
                                    </L7p:item>
                                    </L7p:Predicates>
                                </L7p:ComparisonAssertion>
                                <L7p:SetVariable>
                                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                                </L7p:SetVariable>
                                <L7p:AuditDetailAssertion>
                                    <L7p:CustomLoggerSuffix stringValue="entel.api.syslog.error"/>
                                    <L7p:Detail stringValue="REQUESTID: ${requestId} | EVENTID: ${eventId} | APIM ${service.name} Route Failed | IS STATUS: ${httpRouting.reasonCode} | IS URI: ${httpRouting.url} | IS REQUEST: ${&lt;&lt;request>>.mainpart} | IS RESPONSE: ${&lt;&lt;response>>.mainpart} | TIMESTAMP: ${request.time.local.yyyy-MM-dd'T'HH:mm:ss.SSS}"/>
                                    <L7p:LoggingOnly booleanValue="true"/>
                                </L7p:AuditDetailAssertion>
                                <L7p:CustomizeErrorResponse>
                                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code.result}",
	"description":"Bad Request",
	"descriptionDetail":"${description.result}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                                    <L7p:HttpStatus stringValue="400"/>
                                </L7p:CustomizeErrorResponse>
                                <L7p:RaiseError/>
                            </wsp:All>
                        </wsp:OneOrMore>
                        <L7p:assertionComment>
                            <L7p:Properties mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="RIGHT.COMMENT"/>
                                    <L7p:value stringValue="ERROR"/>
                                </L7p:entry>
                            </L7p:Properties>
                        </L7p:assertionComment>
                    </wsp:All>
                </wsp:OneOrMore>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="OK"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValue="Código 200."/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="14295f18-da19-4f0e-9643-a8c30b3544dc"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="CodeStatus"/>
                </L7p:Encapsulated>
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${status}"/>
                    <L7p:Expression2 stringValue="ERROR"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="ERROR"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".Result.status"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                    <L7p:Target target="OTHER"/>
                    <L7p:VariablePrefix stringValue="status"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtzdGF0dXMucmVzdWx0fQ=="/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtkZXNjcmlwdGlvbi5yZXN1bHR9"/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                </L7p:CustomizeErrorResponse>
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                    <L7p:Parameters mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="portal.analytics.response.code"/>
                            <L7p:value stringValue="422"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                            <L7p:value stringValue="${request.elapsedTime}"/>
                        </L7p:entry>
                    </L7p:Parameters>
                </L7p:Encapsulated>
                <L7p:RaiseError/>
            </wsp:All>
            <L7p:Include>
                <L7p:PolicyGuid stringValue="1b3f18a3-5e88-4cae-9fae-44b459727ac1"/>
            </L7p:Include>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="logica"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
    </wsp:All>
</wsp:Policy>