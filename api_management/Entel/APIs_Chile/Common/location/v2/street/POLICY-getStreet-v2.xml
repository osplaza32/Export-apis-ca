<?xml version="1.0" encoding="UTF-8"?>
<wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <wsp:All wsp:Usage="Required">
        <wsp:OneOrMore wsp:Usage="Required">
            <L7p:HtmlFormDataAssertion>
                <L7p:AllowGet booleanValue="true"/>
                <L7p:FieldSpecs htmlFormFieldSpecArray="included">
                    <L7p:item htmlFormFieldSpec="included">
                        <L7p:AllowEmpty boxedBooleanValue="false"/>
                        <L7p:AllowedLocation fieldLocation="requestUrl"/>
                        <L7p:DataType fieldDataType="number"/>
                        <L7p:MaxOccurs intValue="1"/>
                        <L7p:MinOccurs intValue="1"/>
                        <L7p:Name stringValue="country"/>
                    </L7p:item>
                    <L7p:item htmlFormFieldSpec="included">
                        <L7p:AllowEmpty boxedBooleanValue="false"/>
                        <L7p:AllowedLocation fieldLocation="requestUrl"/>
                        <L7p:DataType fieldDataType="number"/>
                        <L7p:MaxOccurs intValue="1"/>
                        <L7p:MinOccurs intValue="1"/>
                        <L7p:Name stringValue="comune"/>
                    </L7p:item>
                    <L7p:item htmlFormFieldSpec="included">
                        <L7p:AllowEmpty boxedBooleanValue="false"/>
                        <L7p:AllowedLocation fieldLocation="requestUrl"/>
                        <L7p:DataType fieldDataType="number"/>
                        <L7p:MaxOccurs intValue="1"/>
                        <L7p:MinOccurs intValue="1"/>
                        <L7p:Name stringValue="region"/>
                    </L7p:item>
                </L7p:FieldSpecs>
            </L7p:HtmlFormDataAssertion>
            <wsp:All wsp:Usage="Required">
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="NDAw"/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="U29saWNpdHVkIGluY29ycmVjdGE="/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="RWwgZm9ybWF0byBkZSBsYSByZXF1aXNpY2lvbiBubyBlcyB2YWxpZG8sIHVubyBvIG1hcyBjYW1wb3Mgbm8gZXhpc3RlbiBvIHNvbiBpbmNvcnJlY3Rvcw=="/>
                    <L7p:VariableToSet stringValue="descriptionDetail"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:CustomizeErrorResponse>
                    <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                    <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                    <L7p:Enabled booleanValue="false"/>
                    <L7p:ExtraHeaders nameValuePairArray="included"/>
                    <L7p:HttpStatus stringValue="400"/>
                </L7p:CustomizeErrorResponse>
                <L7p:RaiseError/>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="LEFT.COMMENT"/>
                        <L7p:value stringValue="Validate Fields"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <wsp:All wsp:Usage="Required">
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmNvdW50cnl9"/>
                        <L7p:VariableToSet stringValue="country"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLnJlZ2lvbn0="/>
                        <L7p:VariableToSet stringValue="region"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmNvbXVuZX0="/>
                        <L7p:VariableToSet stringValue="comune"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLm5hbWV9"/>
                        <L7p:VariableToSet stringValue="name"/>
                    </L7p:SetVariable>
                    <L7p:SetVariable>
                        <L7p:Base64Expression stringValue="PHNvYXBlbnY6RW52ZWxvcGUgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnRlbT0iaHR0cDovL3RlbXB1cmkub3JnLyI+DQogICA8c29hcGVudjpIZWFkZXIvPg0KICAgPHNvYXBlbnY6Qm9keT4NCiAgICAgIDx0ZW06R2V0Q2FsbGVzV1M+DQogICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICA8dGVtOm1pVXN1YXJpbz4NCiAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgIDx0ZW06UGFzcz48L3RlbTpQYXNzPg0KICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgPHRlbTpJZFVzdWFyaW8+PC90ZW06SWRVc3VhcmlvPg0KICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgPHRlbTpOb21icmVVc3VhcmlvPjwvdGVtOk5vbWJyZVVzdWFyaW8+DQogICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICA8dGVtOkZlY2hhQ3JlYWNpb24+PC90ZW06RmVjaGFDcmVhY2lvbj4NCiAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgIDx0ZW06RmVjaGFFeHBpcmFjaW9uPjwvdGVtOkZlY2hhRXhwaXJhY2lvbj4NCiAgICAgICAgICAgIDwhLS1PcHRpb25hbDotLT4NCiAgICAgICAgICAgIDx0ZW06RmVjaGFJbmljaW9TZXNpb24+PC90ZW06RmVjaGFJbmljaW9TZXNpb24+DQogICAgICAgICAgICA8IS0tT3B0aW9uYWw6LS0+DQogICAgICAgICAgICA8dGVtOlRva2VuPjwvdGVtOlRva2VuPg0KICAgICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgICAgPHRlbTpFc3RhZG8+PC90ZW06RXN0YWRvPg0KICAgICAgICAgPC90ZW06bWlVc3VhcmlvPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPHRlbTpJRF9QQUlTPiR7Y291bnRyeX08L3RlbTpJRF9QQUlTPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPHRlbTpJRF9SRUdJT04+JHtyZWdpb259PC90ZW06SURfUkVHSU9OPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPHRlbTpJRF9DT01VTkE+JHtjb211bmV9PC90ZW06SURfQ09NVU5BPg0KICAgICAgICAgPCEtLU9wdGlvbmFsOi0tPg0KICAgICAgICAgPHRlbTpTVFJDQUxMRT4ke25hbWV9PC90ZW06U1RSQ0FMTEU+DQogICAgICA8L3RlbTpHZXRDYWxsZXNXUz4NCiAgIDwvc29hcGVudjpCb2R5Pg0KPC9zb2FwZW52OkVudmVsb3BlPg=="/>
                        <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                        <L7p:DataType variableDataType="message"/>
                        <L7p:VariableToSet stringValue="requestGetCalleWS"/>
                    </L7p:SetVariable>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="Variables"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:All>
                <L7p:HttpRoutingAssertion>
                    <L7p:FailOnErrorStatus booleanValue="false"/>
                    <L7p:ProtectedServiceUrl stringValue="http://${gateway.xygo.hostname}/ws_entel/Service1.asmx"/>
                    <L7p:ProxyPassword stringValueNull="null"/>
                    <L7p:ProxyUsername stringValueNull="null"/>
                    <L7p:RequestHeaderRules httpPassthroughRuleSet="included">
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Cookie"/>
                            </L7p:item>
                            <L7p:item httpPassthroughRule="included">
                                <L7p:CustomizeValue stringValue="http://tempuri.org/GetCallesWS"/>
                                <L7p:Name stringValue="SOAPAction"/>
                                <L7p:UsesCustomizedValue booleanValue="true"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:RequestHeaderRules>
                    <L7p:RequestMsgSrc stringValue="requestGetCalleWS"/>
                    <L7p:RequestParamRules httpPassthroughRuleSet="included">
                        <L7p:ForwardAll booleanValue="true"/>
                        <L7p:Rules httpPassthroughRules="included"/>
                    </L7p:RequestParamRules>
                    <L7p:ResponseHeaderRules httpPassthroughRuleSet="included">
                        <L7p:Rules httpPassthroughRules="included">
                            <L7p:item httpPassthroughRule="included">
                                <L7p:Name stringValue="Set-Cookie"/>
                            </L7p:item>
                        </L7p:Rules>
                    </L7p:ResponseHeaderRules>
                    <L7p:ResponseMsgDest stringValue="responseGetCalleWS"/>
                    <L7p:SamlAssertionVersion intValue="2"/>
                </L7p:HttpRoutingAssertion>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="PHNvYXA6RW52ZWxvcGUgeG1sbnM6c29hcD0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiPg0KICAgPHNvYXA6Qm9keT4NCiAgICAgIDxHZXRDYWxsZXNXU1Jlc3BvbnNlIHhtbG5zPSJodHRwOi8vdGVtcHVyaS5vcmcvIj4NCiAgICAgICAgIDxHZXRDYWxsZXNXU1Jlc3VsdD4NCiAgICAgICAgICAgIDxDYWxsZT4NCiAgICAgICAgICAgICAgIDxJRD4yNzE1MDwvSUQ+DQogICAgICAgICAgICAgICA8Tm9tYnJlQ2FsbGU+UEFTQUpFIExVSVMgVVJJQkU8L05vbWJyZUNhbGxlPg0KICAgICAgICAgICAgICAgPFJlc3VsdGFkbz4NCiAgICAgICAgICAgICAgICAgIDxDb2RpZ28+MTwvQ29kaWdvPg0KICAgICAgICAgICAgICAgICAgPEdsb3NhPk9rPC9HbG9zYT4NCiAgICAgICAgICAgICAgIDwvUmVzdWx0YWRvPg0KICAgICAgICAgICAgPC9DYWxsZT4NCiAgICAgICAgICAgIDxDYWxsZT4NCiAgICAgICAgICAgICAgIDxJRD43NDI1MzwvSUQ+DQogICAgICAgICAgICAgICA8Tm9tYnJlQ2FsbGU+UEFTQUpFIExVSVMgQ0hBVkVaPC9Ob21icmVDYWxsZT4NCiAgICAgICAgICAgICAgIDxSZXN1bHRhZG8+DQogICAgICAgICAgICAgICAgICA8Q29kaWdvPjE8L0NvZGlnbz4NCiAgICAgICAgICAgICAgICAgIDxHbG9zYT5PazwvR2xvc2E+DQogICAgICAgICAgICAgICA8L1Jlc3VsdGFkbz4NCiAgICAgICAgICAgIDwvQ2FsbGU+DQogICAgICAgICAgICA8Q2FsbGU+DQogICAgICAgICAgICAgICA8SUQ+NDE1MTM8L0lEPg0KICAgICAgICAgICAgICAgPE5vbWJyZUNhbGxlPlBBU0FKRSBMVUlTIFRJUkFETzwvTm9tYnJlQ2FsbGU+DQogICAgICAgICAgICAgICA8UmVzdWx0YWRvPg0KICAgICAgICAgICAgICAgICAgPENvZGlnbz4xPC9Db2RpZ28+DQogICAgICAgICAgICAgICAgICA8R2xvc2E+T2s8L0dsb3NhPg0KICAgICAgICAgICAgICAgPC9SZXN1bHRhZG8+DQogICAgICAgICAgICA8L0NhbGxlPg0KICAgICAgICAgICAgPENhbGxlPg0KICAgICAgICAgICAgICAgPElEPjM5NDQyPC9JRD4NCiAgICAgICAgICAgICAgIDxOb21icmVDYWxsZT5QQVNBSkUgTFVJUyBGRVJSQURBPC9Ob21icmVDYWxsZT4NCiAgICAgICAgICAgICAgIDxSZXN1bHRhZG8+DQogICAgICAgICAgICAgICAgICA8Q29kaWdvPjE8L0NvZGlnbz4NCiAgICAgICAgICAgICAgICAgIDxHbG9zYT5PazwvR2xvc2E+DQogICAgICAgICAgICAgICA8L1Jlc3VsdGFkbz4NCiAgICAgICAgICAgIDwvQ2FsbGU+DQogICAgICAgICA8L0dldENhbGxlc1dTUmVzdWx0Pg0KICAgICAgPC9HZXRDYWxsZXNXU1Jlc3BvbnNlPg0KICAgPC9zb2FwOkJvZHk+DQo8L3NvYXA6RW52ZWxvcGU+"/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:Enabled booleanValue="false"/>
                    <L7p:VariableToSet stringValue="responseGetCalleWS"/>
                </L7p:SetVariable>
                <L7p:ComparisonAssertion>
                    <L7p:AssertionComment assertionComment="included">
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="Evalua si el estado de la respuesta es OK"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:AssertionComment>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${httpRouting.reasonCode}"/>
                    <L7p:Expression2 stringValue="200"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:RightValue stringValue="200"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <wsp:OneOrMore wsp:Usage="Required">
                    <wsp:All wsp:Usage="Required">
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="calleId"/>
                            <L7p:XmlMsgSrc stringValue="responseGetCalleWS"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/soap:Envelope/soap:Body/ns:GetCallesWSResponse/ns:GetCallesWSResult/ns:Calle/ns:Resultado/ns:Codigo"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="xsd"/>
                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns"/>
                                    <L7p:value stringValue="http://tempuri.org/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soap"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsi"/>
                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <L7p:ComparisonAssertion>
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Expression1 stringValue="${calleId.result}"/>
                            <L7p:Operator operatorNull="null"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item dataType="included">
                                    <L7p:Type variableDataType="int"/>
                                </L7p:item>
                                <L7p:item binary="included">
                                    <L7p:CaseSensitive booleanValue="false"/>
                                    <L7p:RightValue stringValue="0"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:ResponseXpathAssertion>
                            <L7p:VariablePrefix stringValue="glosaId"/>
                            <L7p:XmlMsgSrc stringValue="responseGetCalleWS"/>
                            <L7p:XpathExpression xpathExpressionValue="included">
                                <L7p:Expression stringValue="/soap:Envelope/soap:Body/ns:GetCallesWSResponse/ns:GetCallesWSResult/ns:Calle/ns:Resultado/ns:Glosa"/>
                                <L7p:Namespaces mapValue="included">
                                    <L7p:entry>
                                    <L7p:key stringValue="xsd"/>
                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="s"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="ns"/>
                                    <L7p:value stringValue="http://tempuri.org/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="soap"/>
                                    <L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/>
                                    </L7p:entry>
                                    <L7p:entry>
                                    <L7p:key stringValue="xsi"/>
                                    <L7p:value stringValue="http://www.w3.org/2001/XMLSchema-instance"/>
                                    </L7p:entry>
                                </L7p:Namespaces>
                                <L7p:XpathVersion xpathVersion="XPATH_1_0"/>
                            </L7p:XpathExpression>
                        </L7p:ResponseXpathAssertion>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="NDA0"/>
                            <L7p:VariableToSet stringValue="code"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="Tm90IEZvdW5k"/>
                            <L7p:VariableToSet stringValue="description"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtnbG9zYUlkLnJlc3VsdH0="/>
                            <L7p:VariableToSet stringValue="descriptionDetail"/>
                        </L7p:SetVariable>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU30="/>
                            <L7p:VariableToSet stringValue="responseTimestamp"/>
                        </L7p:SetVariable>
                        <L7p:CustomizeErrorResponse>
                            <L7p:Content stringValueReference="inline"><![CDATA[{
"result":{
	"transactionId":"${requestId}",
	"code":"${code}",
	"description":"${description}",
	"descriptionDetail":"${descriptionDetail}",
	"responseTimestamp":"${responseTimestamp}"
	}
}]]></L7p:Content>
                            <L7p:ContentType stringValue="application/json; charset=UTF-8"/>
                            <L7p:ExtraHeaders nameValuePairArray="included"/>
                            <L7p:HttpStatus stringValue="404"/>
                        </L7p:CustomizeErrorResponse>
                        <L7p:Encapsulated>
                            <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                            <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                            <L7p:Parameters mapValue="included">
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.response.code"/>
                                    <L7p:value stringValue="${code}"/>
                                </L7p:entry>
                                <L7p:entry>
                                    <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                                    <L7p:value stringValue="${assertion.latency.ms}"/>
                                </L7p:entry>
                            </L7p:Parameters>
                        </L7p:Encapsulated>
                        <L7p:RaiseError/>
                    </wsp:All>
                    <L7p:TrueAssertion/>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="HTTP 404"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:OneOrMore>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="-1"/>
                    <L7p:MsgVarPrefix stringValue="responseGetCalleWS"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseGetCalleWS"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" indent="yes" encoding="UTF-8"/>
<xsl:template match="/">
    <xsl:copy>
        <xsl:apply-templates/>
    </xsl:copy>
</xsl:template>
<xsl:template match="@*">
    <xsl:attribute name="{local-name()}">
        <xsl:value-of select="current()"/>
    </xsl:attribute>
</xsl:template>
<xsl:template match="*">
    <xsl:element name="{local-name()}">
        <xsl:apply-templates select="@* | * | text()"/>
    </xsl:element>
</xsl:template>
<xsl:template match="text()">
    <xsl:copy>
        <xsl:value-of select="current()"/>
    </xsl:copy>
</xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="OTHER"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="-1"/>
                    <L7p:MsgVarPrefix stringValue="responseGetCalleWS"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseGetCalleWS"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="utf-8" indent="yes" method="xml"/>
    <!-- Identity template : copy all text nodes, elements and attributes -->   
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>

<xsl:template match="Envelope | Body | GetCallesWSResponse | GetCallesWSResult">
    <xsl:apply-templates/>
  </xsl:template>

    <!-- When matching DataSeriesBodyType: do nothing -->
    <xsl:template match="Resultado"/>

    <xsl:template match="Calle">
  <Data>
    <xsl:apply-templates select="@* | node()"/>
  </Data>
</xsl:template>

</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="OTHER"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:Regex>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseGetCalleWS"/>
                    <L7p:Regex stringValue="utf-8\&quot;\?>"/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue="utf-8&quot;?>&lt;aux>"/>
                    <L7p:Target target="OTHER"/>
                </L7p:Regex>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXNwb25zZUdldENhbGxlV1MubWFpbnBhcnR9PC9hdXg+"/>
                    <L7p:ContentType stringValue="text/xml; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="serviceResponse"/>
                </L7p:SetVariable>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="-1"/>
                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output indent="yes" method="xml"/>
  <xsl:template match="*">
    <xsl:element name="{local-name(.)}">
      <xsl:apply-templates select="@* | node()"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="@*">
    <xsl:attribute name="{local-name(.)}">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
   <xsl:template match="text() | comment() | processing-instruction()">
        <xsl:copy />
   </xsl:template>
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="OTHER"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:XslTransformation>
                    <L7p:Direction intValue="-1"/>
                    <L7p:MsgVarPrefix stringValue="xslt2"/>
                    <L7p:OtherTargetMessageVariable stringValue="serviceResponse"/>
                    <L7p:ResourceInfo staticResourceInfo="included">
                        <L7p:Document stringValueReference="inline"><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output encoding="UTF-8" indent="no" media-type="text/x-json" method="text" omit-xml-declaration="yes"/>
    <xsl:strip-space elements="*"/>
    <!--contant-->
    <xsl:variable name="d">0123456789</xsl:variable>
    
    <!-- ignore document text -->
    <xsl:template match="text()[preceding-sibling::node() or following-sibling::node()]"/>
    
    <!-- string -->
    <xsl:template match="text()">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="."/>
        </xsl:call-template>
    </xsl:template>
    

    <!-- Main template for escaping strings; used by above template and for object-properties 
        Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string -->
    <xsl:template name="escape-string">
        <xsl:param name="s"/>
        <xsl:text>"</xsl:text>
        <xsl:call-template name="escape-bs-string">
            <xsl:with-param name="s" select="$s"/>
        </xsl:call-template>
        <xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- Escape the backslash (\) before everything else. -->
    <xsl:template name="escape-bs-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'\')">
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'\'),'\\')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-bs-string">
                    <xsl:with-param name="s" select="substring-after($s,'\')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Escape the double quote ("). -->
    <xsl:template name="escape-quot-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <xsl:when test="contains($s,'&quot;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&quot;'),'\&quot;')"/>
                </xsl:call-template>
                <xsl:call-template name="escape-quot-string">
                    <xsl:with-param name="s" select="substring-after($s,'&quot;')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="$s"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    

    <!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash
        or double quote here, because they don't replace characters (&#x0; becomes \t), but they prefix 
        characters (\ becomes \\). Besides, backslash should be seperate anyway, because it should be 
        processed first. This function can't do that. -->
    <xsl:template name="encode-string">
        <xsl:param name="s"/>
        <xsl:choose>
            <!-- tab -->
            <xsl:when test="contains($s,'&#x9;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#x9;'),'\t',substring-after($s,'&#x9;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- line feed -->
            <xsl:when test="contains($s,'&#xa;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xa;'),'\n',substring-after($s,'&#xa;'))"/>
                </xsl:call-template>
            </xsl:when>
            <!-- carriage return -->
            <xsl:when test="contains($s,'&#xd;')">
                <xsl:call-template name="encode-string">
                    <xsl:with-param name="s" select="concat(substring-before($s,'&#xd;'),'\r',substring-after($s,'&#xd;'))"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise><xsl:value-of select="$s"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- number (no support for javascript mantise) -->
    <xsl:template match="text()[not(string(number())='NaN')]">
        <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
    </xsl:template>
    
    <!-- boolean, case-insensitive -->
    <xsl:template match="text()[translate(.,'TRUE','true')='true']">true</xsl:template>
    <xsl:template match="text()[translate(.,'FALSE','false')='false']">false</xsl:template>
    

    <!-- item:null -->
    <xsl:template match="*[count(child::node())=0 and not(attribute::node())]">
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="local-name()"/>
        </xsl:call-template>
        <xsl:text>:null</xsl:text>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <!-- object -->
    <xsl:template match="*" name="base">
        <!-- <xsl:if test="not(preceding-sibling::*)">{</xsl:if> -->
        <xsl:call-template name="escape-string">
            <xsl:with-param name="s" select="name()"/>
        </xsl:call-template>
        <xsl:text>:</xsl:text>
        <xsl:choose>
            <xsl:when test="attribute::node() and child::node()">
                <xsl:if test="attribute::node() or child::node()">
                    <xsl:text>{</xsl:text>
                    <xsl:call-template name="handleAttributes">
                        <xsl:with-param name="attrib" select="attribute::*"/>
                    </xsl:call-template>
                    <xsl:if test="attribute::* and child::node()"><xsl:text>, </xsl:text></xsl:if>
                    <xsl:apply-templates select="child::*"/>
                    <xsl:if test="text()">
                        <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                    </xsl:if>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:when>

            <xsl:when test="not(attribute::node()) and child::node()">
                <xsl:if test="child::*">{</xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text() and child::*">
                    <xsl:text>"$" :</xsl:text>
                </xsl:if>
                <xsl:apply-templates select="text()"/>
                <xsl:if test="child::*">}</xsl:if>
            </xsl:when>
            <xsl:when test="attribute::node()">
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="text()"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="following-sibling::*">,</xsl:if>
        <!-- <xsl:if test="not(following-sibling::*)">}</xsl:if> -->
    </xsl:template>
    

    <!-- array -->
    <!-- <xsl:template match="*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)&gt;1]"> -->
    <xsl:template match="*[name(preceding-sibling::*[1]) = name(.) or name(following-sibling::*[1]) = name(.) or name(.) = 'Data']">
        <xsl:if test="name(.) != name(preceding-sibling::*[1])">
            <xsl:text>"</xsl:text><xsl:value-of select="name(.)"/><xsl:text>": [</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="not(child::node()) and not(attribute::*)">
                <xsl:text>null</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:call-template name="handleAttributes">
                    <xsl:with-param name="attrib" select="attribute::*"/>
                </xsl:call-template>
                <xsl:if test="attribute::* and (text() or child::node())"><xsl:text>, </xsl:text></xsl:if>
                <xsl:apply-templates select="child::*"/>
                <xsl:if test="text()">
                    <xsl:text>"$" :</xsl:text><xsl:apply-templates select="text()"/>
                </xsl:if>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="name(.) != name(following-sibling::*[1]) or not(following-sibling::*)">]</xsl:if>
        <xsl:if test="following-sibling::*">,</xsl:if>
    </xsl:template>
    

    <xsl:template name="handleAttributes">
        <xsl:param name="attrib"/>
        <xsl:param name="count" select="count($attrib)"/>
        
        <xsl:for-each select="$attrib">
            <xsl:text>"</xsl:text><xsl:value-of select="name()"/><xsl:text>": </xsl:text>
            <xsl:choose>
                <xsl:when test=".">
                    <xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="position() &lt; $count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    
    <!-- convert root element to an anonymous container -->
    <xsl:template match="/">
            <xsl:text>{</xsl:text><xsl:apply-templates select="node()"/><xsl:text>}</xsl:text>
    </xsl:template>
    
</xsl:stylesheet>]]></L7p:Document>
                    </L7p:ResourceInfo>
                    <L7p:Target target="OTHER"/>
                    <L7p:TransformName stringValue=""/>
                    <L7p:XsltVersion stringValue="1.0"/>
                </L7p:XslTransformation>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtzZXJ2aWNlUmVzcG9uc2UubWFpbnBhcnR9"/>
                    <L7p:ContentType stringValue="application/json; charset=utf-8"/>
                    <L7p:DataType variableDataType="message"/>
                    <L7p:VariableToSet stringValue="responseJson"/>
                </L7p:SetVariable>
                <L7p:EvaluateJsonPathExpression>
                    <L7p:Expression stringValue=".aux"/>
                    <L7p:OtherTargetMessageVariable stringValue="responseJson"/>
                    <L7p:Target target="OTHER"/>
                </L7p:EvaluateJsonPathExpression>
                <L7p:Regex>
                    <L7p:AutoTarget booleanValue="false"/>
                    <L7p:OtherTargetMessageVariable stringValue="jsonPath.result"/>
                    <L7p:Regex stringValue="^(.)|}$"/>
                    <L7p:Replace booleanValue="true"/>
                    <L7p:Replacement stringValue=""/>
                    <L7p:Target target="OTHER"/>
                </L7p:Regex>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="MjAw"/>
                    <L7p:VariableToSet stringValue="code"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="T0s="/>
                    <L7p:VariableToSet stringValue="description"/>
                </L7p:SetVariable>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnRpbWUubG9jYWwueXl5eS9NTS9kZCdUJ0hIOm1tOnNzLlNTU30="/>
                    <L7p:VariableToSet stringValue="responseTimestamp"/>
                </L7p:SetVariable>
                <L7p:Encapsulated>
                    <L7p:EncapsulatedAssertionConfigGuid stringValue="2873d7c1-bfb2-42b8-ab9a-35767965de80"/>
                    <L7p:EncapsulatedAssertionConfigName stringValue="API Portal Integration - Post Route"/>
                    <L7p:Parameters mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="portal.analytics.response.code"/>
                            <L7p:value stringValue="200"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="portal.analytics.routingTotalTime"/>
                            <L7p:value stringValue="${assertion.latency.ms}"/>
                        </L7p:entry>
                    </L7p:Parameters>
                </L7p:Encapsulated>
                <L7p:HardcodedResponse>
                    <L7p:Base64ResponseBody stringValue="ewoicmVzdWx0Ijp7CgkidHJhbnNhY3Rpb25JZCI6IiR7cmVxdWVzdElkfSIsCgkiY29kZSI6IiR7Y29kZX0iLAoJImRlc2NyaXB0aW9uIjoiJHtkZXNjcmlwdGlvbn0iLAoJImRlc2NyaXB0aW9uRGV0YWlsIjoiT3BlcmFjacOzbiByZWFsaXphZGEgZXhpdG9zYW1lbnRlIiwKCSJyZXNwb25zZVRpbWVzdGFtcCI6IiR7cmVzcG9uc2VUaW1lc3RhbXB9IgoJfSwKJHtqc29uUGF0aC5yZXN1bHR9Cn0="/>
                    <L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/>
                </L7p:HardcodedResponse>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="ROUTE"/>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Include>
                    <L7p:PolicyGuid stringValue="1b3f18a3-5e88-4cae-9fae-44b459727ac1"/>
                </L7p:Include>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="Logica"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
    </wsp:All>
</wsp:Policy>