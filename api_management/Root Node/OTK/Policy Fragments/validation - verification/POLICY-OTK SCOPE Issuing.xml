<?xml version="1.0" encoding="UTF-8"?>
<wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
    <wsp:All wsp:Usage="Required">
        <L7p:CommentAssertion>
            <L7p:Comment stringValue=" ============================================"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue=" === ***  THIS POLICY IS READ ONLY ***"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue=" === If you have the need to customize this policy"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue=" === please contact CA APIM Support so we can improve customization capability"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue=" ============================================"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="This policy can be found and should be used as 'Encapsulated Assertion'!"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="This policy will validate SCOPE. It will reject all non-registered but reguested SCOPE values."/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="If only non-registered SCOPE values are requested the policy will fail."/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="If no SCOPE was registered and no SCOPE was requested SCOPE will be set to 'oob'"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="*************************************************"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="Input variables: scope.registered, scope.requested"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="Output variables: scope.granted"/>
        </L7p:CommentAssertion>
        <L7p:CommentAssertion>
            <L7p:Comment stringValue="*************************************************"/>
        </L7p:CommentAssertion>
        <L7p:SetVariable>
            <L7p:Base64Expression stringValue="JHtzY29wZS5yZXF1ZXN0ZWR9"/>
            <L7p:VariableToSet stringValue="remember_requested_scope"/>
        </L7p:SetVariable>
        <wsp:OneOrMore wsp:Usage="Required">
            <wsp:All wsp:Usage="Required">
                <wsp:OneOrMore wsp:Usage="Required">
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${scope.registered}"/>
                        <L7p:Expression2 stringValue="oob"/>
                        <L7p:Operator operator="EMPTY"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item binary="included">
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:Operator operator="EMPTY"/>
                                <L7p:RightValue stringValue="oob"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                    <L7p:ComparisonAssertion>
                        <L7p:CaseSensitive booleanValue="false"/>
                        <L7p:Expression1 stringValue="${scope.registered}"/>
                        <L7p:Expression2 stringValue="oob"/>
                        <L7p:Predicates predicates="included">
                            <L7p:item binary="included">
                                <L7p:CaseSensitive booleanValue="false"/>
                                <L7p:RightValue stringValue="oob"/>
                            </L7p:item>
                        </L7p:Predicates>
                    </L7p:ComparisonAssertion>
                </wsp:OneOrMore>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="b29i"/>
                    <L7p:VariableToSet stringValue="scope.granted"/>
                </L7p:SetVariable>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="case: 01"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValueReference="inline"><![CDATA[No SCOPE registered --> grant none --> oob;
                registered: oob;
                requested: none | scopea;
                grant:         oob;]]></L7p:value>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:ComparisonAssertion>
                    <L7p:CaseSensitive booleanValue="false"/>
                    <L7p:Expression1 stringValue="${scope.requested}"/>
                    <L7p:Expression2 stringValue="oob"/>
                    <L7p:Operator operator="EMPTY"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:CaseSensitive booleanValue="false"/>
                            <L7p:Operator operator="EMPTY"/>
                            <L7p:RightValue stringValue="oob"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="b29i"/>
                    <L7p:VariableToSet stringValue="scope.granted"/>
                </L7p:SetVariable>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="case: 02"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValueReference="inline"><![CDATA[SCOPE registered but none requested --> grant none --> oob, otherwise a client could spoof all possible SCOPEs;
                registered: scopea scopeb;
                requested: none;
                grant: oob;]]></L7p:value>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:ComparisonAssertion>
                    <L7p:Expression1 stringValue="${scope.registered}"/>
                    <L7p:Expression2 stringValue="${scope.requested}"/>
                    <L7p:Predicates predicates="included">
                        <L7p:item binary="included">
                            <L7p:RightValue stringValue="${scope.requested}"/>
                        </L7p:item>
                    </L7p:Predicates>
                </L7p:ComparisonAssertion>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtzY29wZS5yZWdpc3RlcmVkfQ=="/>
                    <L7p:VariableToSet stringValue="scope.granted"/>
                </L7p:SetVariable>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="case: 03"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValueReference="inline"><![CDATA[SCOPE registered is the same as SCOPE requested --> grant requested SCOPE;
                registered: scopea scopeb scopec;
                requested: scopea scopeb scopec;
                grant: scopea scopeb scopec;]]></L7p:value>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <wsp:All wsp:Usage="Required">
                <L7p:Split>
                    <L7p:IgnoreEmptyValues booleanValue="true"/>
                    <L7p:InputVariable stringValue="scope.requested"/>
                    <L7p:OutputVariable stringValue="requestedScope"/>
                    <L7p:SplitPattern stringValue="[ ]"/>
                </L7p:Split>
                <L7p:Split>
                    <L7p:IgnoreEmptyValues booleanValue="true"/>
                    <L7p:InputVariable stringValue="scope.registered"/>
                    <L7p:OutputVariable stringValue="registeredScope"/>
                    <L7p:SplitPattern stringValue="[ ]"/>
                </L7p:Split>
                <L7p:ForEachLoop L7p:Usage="Required"
                    iterationLimit="100" loopVariable="requestedScope" variablePrefix="verifyScope">
                    <wsp:OneOrMore wsp:Usage="Required">
                        <L7p:ComparisonAssertion>
                            <L7p:Expression1 stringValue="${registeredScope}"/>
                            <L7p:Expression2 stringValue="${verifyScope.current}"/>
                            <L7p:MultivaluedComparison multivaluedComparison="ANY"/>
                            <L7p:Predicates predicates="included">
                                <L7p:item binary="included">
                                    <L7p:RightValue stringValue="${verifyScope.current}"/>
                                </L7p:item>
                            </L7p:Predicates>
                        </L7p:ComparisonAssertion>
                        <L7p:Regex>
                            <L7p:AutoTarget booleanValue="false"/>
                            <L7p:OtherTargetMessageVariable stringValue="scope.requested"/>
                            <L7p:PatternContainsVariables booleanValue="true"/>
                            <L7p:Regex stringValue="^${verifyScope.current}|(\s)${verifyScope.current}(\s)|${verifyScope.current}$"/>
                            <L7p:Replace booleanValue="true"/>
                            <L7p:Replacement stringValue="$1$2"/>
                            <L7p:Target target="OTHER"/>
                        </L7p:Regex>
                    </wsp:OneOrMore>
                </L7p:ForEachLoop>
                <wsp:OneOrMore wsp:Usage="Required">
                    <L7p:Regex>
                        <L7p:AutoTarget booleanValue="false"/>
                        <L7p:OtherTargetMessageVariable stringValue="scope.requested"/>
                        <L7p:Regex stringValue="(\w+)"/>
                        <L7p:Replacement stringValue="found"/>
                        <L7p:Target target="OTHER"/>
                    </L7p:Regex>
                    <wsp:All wsp:Usage="Required">
                        <L7p:AuditDetailAssertion>
                            <L7p:Detail stringValue="An invalid SCOPE was given. Given: '${remember_requested_scope}', registered: '${scope.registered}'"/>
                        </L7p:AuditDetailAssertion>
                        <L7p:SetVariable>
                            <L7p:Base64Expression stringValue="MTE1"/>
                            <L7p:VariableToSet stringValue="error.code"/>
                        </L7p:SetVariable>
                        <L7p:FalseAssertion/>
                    </wsp:All>
                    <L7p:assertionComment>
                        <L7p:Properties mapValue="included">
                            <L7p:entry>
                                <L7p:key stringValue="LEFT.COMMENT"/>
                                <L7p:value stringValue="case: 05"/>
                            </L7p:entry>
                            <L7p:entry>
                                <L7p:key stringValue="RIGHT.COMMENT"/>
                                <L7p:value stringValue="If SCOPE.requested is empty now because it did not include any registered values at all fail the request"/>
                            </L7p:entry>
                        </L7p:Properties>
                    </L7p:assertionComment>
                </wsp:OneOrMore>
                <L7p:SetVariable>
                    <L7p:Base64Expression stringValue="JHtzY29wZS5yZXF1ZXN0ZWR9"/>
                    <L7p:VariableToSet stringValue="scope.granted"/>
                </L7p:SetVariable>
                <L7p:assertionComment>
                    <L7p:Properties mapValue="included">
                        <L7p:entry>
                            <L7p:key stringValue="LEFT.COMMENT"/>
                            <L7p:value stringValue="case: 04, 05"/>
                        </L7p:entry>
                        <L7p:entry>
                            <L7p:key stringValue="RIGHT.COMMENT"/>
                            <L7p:value stringValueReference="inline"><![CDATA[SCOPE registered is a subset of SCOPE requested --> grant registered SCOPE;
                registered:  scopea;
                requested:  scopea scopeb;
                grant:          scopea;]]></L7p:value>
                        </L7p:entry>
                    </L7p:Properties>
                </L7p:assertionComment>
            </wsp:All>
            <L7p:assertionComment>
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="Do not grant non-registered SCOPEs"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:assertionComment>
        </wsp:OneOrMore>
        <L7p:Regex>
            <L7p:AssertionComment assertionComment="included">
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="// remove [ ] at beginning and end of line"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:AssertionComment>
            <L7p:AutoTarget booleanValue="false"/>
            <L7p:OtherTargetMessageVariable stringValue="scope.granted"/>
            <L7p:Regex stringValue="^\s{0,1000}|\s{0,1000}$"/>
            <L7p:Replace booleanValue="true"/>
            <L7p:Replacement stringValue=""/>
            <L7p:Target target="OTHER"/>
        </L7p:Regex>
        <L7p:Regex>
            <L7p:AssertionComment assertionComment="included">
                <L7p:Properties mapValue="included">
                    <L7p:entry>
                        <L7p:key stringValue="RIGHT.COMMENT"/>
                        <L7p:value stringValue="// remove mulitple subsequent [ ]"/>
                    </L7p:entry>
                </L7p:Properties>
            </L7p:AssertionComment>
            <L7p:AutoTarget booleanValue="false"/>
            <L7p:OtherTargetMessageVariable stringValue="scope.granted"/>
            <L7p:Regex stringValue="\s{2,1000}"/>
            <L7p:Replace booleanValue="true"/>
            <L7p:Replacement stringValue=" "/>
            <L7p:Target target="OTHER"/>
        </L7p:Regex>
    </wsp:All>
</wsp:Policy>