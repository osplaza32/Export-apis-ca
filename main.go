package main

import (
	//"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	xj "github.com/basgys/goxml2json"

)

func main() {
	fmt.Println("Starting the application...")
	//recursivecall("https://10.49.22.7:8443/restman/1.0/folders/faa9255a5852a5f149b0039d964ef6cc/dependencies?level=1")
	recursivecall("http://127.0.0.1:8081/customer/dfsf")

	
}
func recursivecall(url string){
	var resp AutoGenerated
	req, _ := http.NewRequest("GET", url, nil)


	req.Header.Add("Content-Type", "application/json")
	//req.Header.Add("Authorization", "Basic "+basicAuth("restman","Entel123."))
	req.Header.Add("cache-control", "no-cache")
	req.Header.Add("Postman-Token", "621b450c-cc8c-4d83-b0fb-6f69fbd7987c")
	/*cfg := &tls.Config{
		InsecureSkipVerify: true,
	}
	http.DefaultClient.Transport = &http.Transport{
		TLSClientConfig: cfg,
	}*/
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	jsonresp, _ := xj.Convert(res.Body)
	readBuf, _ := ioutil.ReadAll(jsonresp)
	json.Unmarshal(readBuf, &resp)
	for _, element := range resp.Item.Resource.DependencyList.Reference.Dependencies.Dependency {
		if element.Type == "FOLDER"{
			fmt.Print("SI LO METO A LA RECURSIVIDAD\n")
		}else {
			if element.Type == "SERVICE" || element.Type == "POLICY" {
				fmt.Print("aca parte la accion verdadera\n ")
				} else{
				fmt.Print("si nose que es lo puedo meter auna funcion que vea el tipo y escupa la url mas conveniente ")


			}
			}
		}
}
func basicAuth(username, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}
type AutoGenerated struct {
	Item struct {
		Name      string `json:"Name"`
		Type      string `json:"Type"`
		TimeStamp string `json:"TimeStamp"`
		Link      struct {
			Rel string `json:"-rel"`
			URI string `json:"-uri"`
		} `json:"Link"`
		Resource struct {
			DependencyList struct {
				Reference struct {
					Name         string `json:"Name"`
					ID           string `json:"Id"`
					Type         string `json:"Type"`
					Dependencies struct {
						Dependency []struct {
							ID   string `json:"Id"`
							Type string `json:"Type"`
							Name string `json:"Name"`
						} `json:"Dependency"`
					} `json:"Dependencies"`
				} `json:"Reference"`
				Dependencies struct {
					Dependency []struct {
						Type string `json:"Type"`
						Name string `json:"Name"`
						ID   string `json:"Id"`
					} `json:"Dependency"`
				} `json:"Dependencies"`
				MissingDependencies string `json:"MissingDependencies"`
			} `json:"DependencyList"`
		} `json:"Resource"`
		L7 string `json:"-l7"`
	} `json:"Item"`
}